"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[8893],{49443:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>r});var a=n(85893),o=n(11151);const i={sidebar_position:1},s="Analyzing on-chain data using Covalent API + Python",l={id:"build/builder-guides/integration_toolings/cookbook_1",title:"Analyzing on-chain data using Covalent API + Python",description:"TL;DR",source:"@site/docs/build/builder-guides/integration_toolings/cookbook_1.md",sourceDirName:"build/builder-guides/integration_toolings",slug:"/build/builder-guides/integration_toolings/cookbook_1",permalink:"/ja/docs/build/builder-guides/integration_toolings/cookbook_1",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/builder-guides/integration_toolings/cookbook_1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"How to set up a Zombienet for XCM testing",permalink:"/ja/docs/build/builder-guides/leverage_parachains/zombienet"},next:{title:"Add wallets into Astar Portal",permalink:"/ja/docs/build/builder-guides/integration_toolings/add-wallets-to-portal"}},d={},r=[{value:"TL;DR",id:"tldr",level:2},{value:"What is Covalent?",id:"what-is-covalent",level:2},{value:"Analyzing ArthSwap pool balance",id:"analyzing-arthswap-pool-balance",level:2},{value:"Step 1: Extract data",id:"step-1-extract-data",level:3},{value:"Step 2: Transform the data into lists",id:"step-2-transform-the-data-into-lists",level:3},{value:"Step 3: Transform the data to Pandas Dataframe",id:"step-3-transform-the-data-to-pandas-dataframe",level:3},{value:"Step 4: Visualizing the data",id:"step-4-visualizing-the-data",level:3},{value:"Reference",id:"reference",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"analyzing-on-chain-data-using-covalent-api--python",children:"Analyzing on-chain data using Covalent API + Python"}),"\n",(0,a.jsx)(t.h2,{id:"tldr",children:"TL;DR"}),"\n",(0,a.jsx)(t.p,{children:"This cookbook will go through how to extract and analyze on-chain data of Astar Network using Python and Covalent API. This cookbook is especially useful for non-devs who are not familiar with setting up indexers to query on-chain data. All steps can be done totally free without having to use a terminal or setting up a local development environment."}),"\n",(0,a.jsx)(t.h2,{id:"what-is-covalent",children:"What is Covalent?"}),"\n",(0,a.jsx)(t.p,{children:"Covalent leverages big-data technologies to create meaning from hundreds of billions of data points, delivering actionable insights to investors and allowing developers to allocate resources to higher-utility goals within their organization. Instead of pain-stakingly sourcing data from a small handful of chains, Covalent aggregates information from across dozens of sources including nodes, chains, and data feeds. The Covalent API then sources end users with individualized data by wallet, including current and historical investment performance across all types of digital assets. Most importantly, Covalent returns this data in a rapid and consistent manner, incorporating all relevant data within one API interface."}),"\n",(0,a.jsx)(t.h2,{id:"analyzing-arthswap-pool-balance",children:"Analyzing ArthSwap pool balance"}),"\n",(0,a.jsx)(t.p,{children:"As an example in this cookbook, we will analyze the change in the balance of ceUSDC/ceUSDT pool on ArthSwap. We will be using Python in this cookbook. For non-devs who are not familiar to setting up local environment to run Python, we recommend using Jupyter Notebook."}),"\n",(0,a.jsxs)(t.p,{children:["Make sure to sign up for Covalent to get the API key needed to run the code. (You can register ",(0,a.jsx)(t.a,{href:"https://www.covalenthq.com/",children:"here"}),")"]}),"\n",(0,a.jsx)(t.h3,{id:"step-1-extract-data",children:"Step 1: Extract data"}),"\n",(0,a.jsx)(t.p,{children:"Before we do any data transformation and analytics, we need a list of historical portfolio data of ceUSDC/ceUSDT pool contract as our first step. To get the information, we need to send the following request (see the reference section in this cookbook for more info on API format):"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"GET /v1/{chain_id}/address/{address}/portfolio_v2/\n"})}),"\n",(0,a.jsx)(t.p,{children:"In this request, parameter chain_id is the chain ID of the Blockchain being queried. In this cookbook, we will use chain_id = 593 (Astar Network) and contract address of ceUSDC/ceUSDT pool =\xa00xD72A602C714ae36D990dc835eA5F96Ef87657D5e\xa0as example. The following code uses Python to extract the data."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"import requests\n\nAPI_KEY = [YOUR_API_KEY]\nbase_url = 'https://api.covalenthq.com/v1'\nblockchain_chain_id = '592'\naddress = \"0xD72A602C714ae36D990dc835eA5F96Ef87657D5e\"\n\ndef get_wallet_portfolio(chain_id, address):\n    endpoint = f'/{chain_id}/address/{address}/portfolio_v2/?key={API_KEY}'\n    url = base_url + endpoint\n    result = requests.get(url).json()\n    return(result)\n\nportfolio_data = get_wallet_portfolio(blockchain_chain_id, address)\nprint(portfolio_data)\n"})}),"\n",(0,a.jsx)(t.p,{children:"Below is a sample output:"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"{'data': {'address': '0xd72a602c714ae36d990dc835ea5f96ef87657d5e', 'updated_at': '2022-09-20T07:17:27.930341337Z', 'next_update_at': '2022-09-20T07:22:27.930341567Z', 'quote_currency': 'USD', 'chain_id': 592, 'items': [{'contract_decimals': 6, 'contract_name': 'USD Coin', 'contract_ticker_symbol': 'USDC', 'contract_address': '0x6a2d262d56735dba19dd70682b39f6be9a931d98', 'supports_erc': None, 'logo_url': '[https://logos.covalenthq.com/tokens/592/0x6a2d262d56735dba19dd70682b39f6be9a931d98.png](https://logos.covalenthq.com/tokens/592/0x6a2d262d56735dba19dd70682b39f6be9a931d98.png)', 'holdings': [{'timestamp': '2022-09-20T00:00:00Z', 'quote_rate': 0.9932833, 'open': {'balance': '391683183282', 'quote': 389052.34}, 'high': {'balance': '392123445379', 'quote': 389489.66}, 'low': {'balance': '316424219770', 'quote': 314298.88}, 'close': {'balance': '317469504720', 'quote': 315337.16}}, {'timestamp': '2022-09-19T00:00:00Z', 'quote_rate': 1.0022721, 'open': {'balance': '391991979278', 'quote': 392882.62}, 'high': {'balance': '392739045673', 'quote': 393631.4}, 'low': {'balance': '389667428685', 'quote': 390552.8}, 'close': {'balance': '391683183282', 'quote': 392573.16}},"})," ..."]}),"\n",(0,a.jsx)(t.h3,{id:"step-2-transform-the-data-into-lists",children:"Step 2: Transform the data into lists"}),"\n",(0,a.jsx)(t.p,{children:"After data extraction is done in step 1, we will transform that data into three lists so it can be easily handled using Pandas, a data analytics library for Python. The code below creates a few functions that transform our data into lists."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import requests\nimport json\n\nAPI_KEY = \'ckey_76799bb987a14e179ea6031d15c\'\nbase_url = \'https://api.covalenthq.com/v1\'\nblockchain_chain_id = \'592\'\naddress = "0xD72A602C714ae36D990dc835eA5F96Ef87657D5e"\n\ndef get_wallet_portfolio(chain_id, address):\n    endpoint = f\'/{chain_id}/address/{address}/portfolio_v2/?key={API_KEY}\'\n    url = base_url + endpoint\n    result = requests.get(url).json()\n    return(result)\n\ndef get_timestamp_list(sample_data):\n    timestamp = []\n    for tmp in reversed(sample_data):\n        timestamp.append(tmp["timestamp"][5:10])\n    return (timestamp)\n\ndef get_token_balance_list(data):\n    token_balance_list = []\n    for tmp_data in reversed(data):\n        balance = tmp_data["open"]["balance"]\n        token_balance_list.append(int(balance) // 1000000)\n    return (token_balance_list)\n    \nportfolio_data = get_wallet_portfolio(blockchain_chain_id, address)\ntimestamp_list = get_timestamp_list(portfolio_data["data"]["items"][0]["holdings"])\nusdc_token_balance_list = get_token_balance_list(portfolio_data["data"]["items"][0]["holdings"])\nusdt_token_balance_list = get_token_balance_list(portfolio_data["data"]["items"][1]["holdings"])\nprint(timestamp_list)\nprint(usdc_token_balance_list)\nprint(usdt_token_balance_list)\n'})}),"\n",(0,a.jsx)(t.p,{children:"The output will look as follows. The first list is a series of timestamps, the second is liquidity of USDC (in USD), and the third is liquidity of USDT (in USD) on each day."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"['08-21', '08-22', '08-23', '08-24', '08-25', '08-26', '08-27', '08-28', '08-29', '08-30', '08-31', '09-01', '09-02', '09-03', '09-04', '09-05', '09-06', '09-07', '09-08', '09-09', '09-10', '09-11', '09-12', '09-13', '09-14', '09-15', '09-16', '09-17', '09-18', '09-19', '09-20']\n[317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469, 317469]\n[317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368, 317368]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"step-3-transform-the-data-to-pandas-dataframe",children:"Step 3: Transform the data to Pandas Dataframe"}),"\n",(0,a.jsx)(t.p,{children:"Now, let's transform the lists created in Step 2 into Pandas Dataframe so that they can be turned into a graph in next step."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import pandas as pd\nimport requests\nimport json\n\nAPI_KEY = \'ckey_76799bb987a14e179ea6031d15c\'\nbase_url = \'https://api.covalenthq.com/v1\'\nblockchain_chain_id = \'592\'\naddress = "0xD72A602C714ae36D990dc835eA5F96Ef87657D5e"\n\ndef get_wallet_portfolio(chain_id, address):\n    endpoint = f\'/{chain_id}/address/{address}/portfolio_v2/?key={API_KEY}\'\n    url = base_url + endpoint\n    result = requests.get(url).json()\n    return(result)\n\ndef get_timestamp_list(sample_data):\n    timestamp = []\n    for tmp in reversed(sample_data):\n        timestamp.append(tmp["timestamp"][5:10])\n    return (timestamp)\n\ndef get_token_balance_list(data):\n    token_balance_list = []\n    for tmp_data in reversed(data):\n        balance = tmp_data["open"]["balance"]\n        token_balance_list.append(int(balance) // 1000000)\n    return (token_balance_list)\n    \nportfolio_data = get_wallet_portfolio(blockchain_chain_id, address)\ntimestamp_list = get_timestamp_list(portfolio_data["data"]["items"][0]["holdings"])\nusdc_token_balance_list = get_token_balance_list(portfolio_data["data"]["items"][0]["holdings"])\nusdt_token_balance_list = get_token_balance_list(portfolio_data["data"]["items"][1]["holdings"])\n\nlp_df = pd.DataFrame(data = [usdc_token_balance_list, usdt_token_balance_list], index = ["USDC", "USDT"], columns = timestamp_list)\nprint(lp_df.T)\n'})}),"\n",(0,a.jsx)(t.p,{children:"The output will look as follows. You can see that the lists have turned into a dataframe."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"       USDC    USDT\n08-21  446081  451625\n08-22  453840  459288\n08-23  455964  461331\n08-24  455846  461451\n08-25  456262  461089\n08-26  455285  461550\n08-27  457687  463863\n08-28  456071  462506\n08-29  460596  465996\n08-30  449226  454343\n08-31  429668  435999\n09-01  430336  435230\n09-02  331040  335945\n09-03  321951  327345\n09-04  221460  227266\n09-05  226810  231804\n09-06  237230  242222\n09-07  302571  308771\n09-08  293992  299795\n09-09  292354  297289\n09-10  292838  297973\n09-11  296315  301463\n09-12  296068  301855\n09-13  296641  301435\n09-14  408155  413254\n09-15  289567  294152\n09-16  393641  398622\n09-17  391511  395897\n09-18  392412  396156\n09-19  391991  396653\n09-20  391683  392573\n"})}),"\n",(0,a.jsx)(t.h3,{id:"step-4-visualizing-the-data",children:"Step 4: Visualizing the data"}),"\n",(0,a.jsx)(t.p,{children:"In this final step, we will use our dataframe to visualize the liquidity of USDC and USDT in the pool for each day."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'%matplotlib inline\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport requests\nimport json\n\nAPI_KEY = \'ckey_76799bb987a14e179ea6031d15c\'\nbase_url = \'https://api.covalenthq.com/v1\'\nblockchain_chain_id = \'592\'\naddress = "0xD72A602C714ae36D990dc835eA5F96Ef87657D5e"\n\ndef get_wallet_portfolio(chain_id, address):\n    endpoint = f\'/{chain_id}/address/{address}/portfolio_v2/?key={API_KEY}\'\n    url = base_url + endpoint\n    result = requests.get(url).json()\n    return(result)\n\ndef get_timestamp_list(sample_data):\n    timestamp = []\n    for tmp in reversed(sample_data):\n        timestamp.append(tmp["timestamp"][5:10])\n    return (timestamp)\n\ndef get_token_balance_list(data):\n    token_balance_list = []\n    for tmp_data in reversed(data):\n        balance = tmp_data["open"]["balance"]\n        token_balance_list.append(int(balance) // 1000000)\n    return (token_balance_list)\n    \nportfolio_data = get_wallet_portfolio(blockchain_chain_id, address)\ntimestamp_list = get_timestamp_list(portfolio_data["data"]["items"][0]["holdings"])\nusdc_token_balance_list = get_token_balance_list(portfolio_data["data"]["items"][0]["holdings"])\nusdt_token_balance_list = get_token_balance_list(portfolio_data["data"]["items"][1]["holdings"])\n\nlp_df = pd.DataFrame(data = [usdc_token_balance_list, usdt_token_balance_list], index = ["USDC", "USDT"], columns = timestamp_list)\nlp_df.T.plot()\n'})}),"\n",(0,a.jsx)(t.p,{children:"The output will look as follows:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"1",src:n(56827).Z+"",width:"1320",height:"900"})}),"\n",(0,a.jsx)(t.p,{children:"That's it!"}),"\n",(0,a.jsx)(t.p,{children:"This guide demonstrated how we can easily visualize the historical balance of ceUSDC/ceUSDT pool on ArthSwap using Covalent and Python. Creating a graph like this can be a useful reference tool for your project. For example, anyone can use the graph in this eample to see the liquidity for both USDT and USDC on 9/20 was $400K. No need to go digging for specific on-chain data."}),"\n",(0,a.jsx)(t.p,{children:"This is just a simple example. There is a lot of API opened by Covalent and endless ways to use those data to create insightful graphs, and other reference resources."}),"\n",(0,a.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Covalent API resource","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://www.covalenthq.com/docs/api/#/0/0/USD/1",children:"https://www.covalenthq.com/docs/api/#/0/0/USD/1"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["Covalent docs","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://www.covalenthq.com/docs/",children:"https://www.covalenthq.com/docs/"})}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},56827:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/1-bbc70e3c14e8e8beffecd4e01181c00b.png"},11151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>s});var a=n(67294);const o={},i=a.createContext(o);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);