"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[2550],{17386:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(85893),a=t(11151);const o={sidebar_position:1},s="Implement PSP22 for Pair",c={id:"tutorials/from-zero-to-ink-hero/dex/Pair/psp22",title:"Implement PSP22 for Pair",description:"Please check out this branch and open it in your IDE.",source:"@site/docs/tutorials/from-zero-to-ink-hero/dex/Pair/psp22.md",sourceDirName:"tutorials/from-zero-to-ink-hero/dex/Pair",slug:"/tutorials/from-zero-to-ink-hero/dex/Pair/psp22",permalink:"/ja/docs/tutorials/from-zero-to-ink-hero/dex/Pair/psp22",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/tutorials/from-zero-to-ink-hero/dex/Pair/psp22.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"File & Folder Structure",permalink:"/ja/docs/tutorials/from-zero-to-ink-hero/dex/Structure/file-structure"},next:{title:"Pair Storage and Getters",permalink:"/ja/docs/tutorials/from-zero-to-ink-hero/dex/Pair/storage"}},i={},l=[{value:"1. Implement Basic PSP22 in our Contract.",id:"1-implement-basic-psp22-in-our-contract",level:2},{value:"2. Add Events",id:"2-add-events",level:2},{value:"3. Override Generic Function of PSP22",id:"3-override-generic-function-of-psp22",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"implement-psp22-for-pair",children:"Implement PSP22 for Pair"}),"\n",(0,r.jsxs)(n.p,{children:["Please check out this ",(0,r.jsx)(n.a,{href:"https://github.com/AstarNetwork/wasm-tutorial-dex/tree/tutorial/start",children:"branch"})," and open it in your IDE."]}),"\n",(0,r.jsxs)(n.p,{children:["Pair contract implements an ERC-20 (slightly modified as uint256::MAX does not ",(0,r.jsx)(n.a,{href:"https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2ERC20.sol#L74",children:"decrease allowance"}),").\nIn Astar the standard for fungible tokens is ",(0,r.jsx)(n.a,{href:"https://github.com/w3f/PSPs/blob/master/PSPs/psp-22.md",children:"PSP22"}),". We will use the OpenBrush ",(0,r.jsx)(n.a,{href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/src/token/psp22",children:"PSP22 implementation"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"1-implement-basic-psp22-in-our-contract",children:"1. Implement Basic PSP22 in our Contract."}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"Cargo.toml"})," file, import crates from ink!, scale, and Openbrush (with feature ",(0,r.jsx)(n.code,{children:'"psp22"'}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[package]\nname = "pair_contract"\nversion = "0.1.0"\nauthors = ["Stake Technologies <devops@stake.co.jp>"]\nedition = "2021"\n\n[dependencies]\nink = { version = "4.0.0", default-features = false}\n\nscale = { package = "parity-scale-codec", version = "3", default-features = false, features = ["derive"] }\nscale-info = { version = "2.3", default-features = false, features = ["derive"], optional = true }\n\nopenbrush = { git = "https://github.com/727-Ventures/openbrush-contracts", version = "3.0.0", default-features = false, features = ["psp22"] }\n\n[lib]\nname = "pair_contract"\npath = "lib.rs"\ncrate-type = [\n    "cdylib"\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink/std",\n    "scale/std",\n    "scale-info/std",\n    "openbrush/std",\n]\nink-as-dependency = []\n\n[profile.dev]\noverflow-checks = false\n\n[profile.release]\noverflow-checks = false\n\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"contracts/pair/Cargo.toml"})}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"lib.rs"})," file in the contract crate import everything (with ",(0,r.jsx)(n.code,{children:"*"}),") from ",(0,r.jsx)(n.code,{children:"openbrush::contracts::psp22"})," as well as the ",(0,r.jsx)(n.code,{children:"Storage"})," trait and ",(0,r.jsx)(n.code,{children:"SpreadAllocate"})," from ink!"]}),"\n",(0,r.jsxs)(n.p,{children:["As reminder the ",(0,r.jsx)(n.code,{children:'#![cfg_attr(not(feature = "std"), no_std)]'})," attribute is for ",(0,r.jsx)(n.a,{href:"https://use.ink/faq#what-does-the-cfg_attrnotfeature--std-no_std-at-the-beginning-of-each-contract-mean",children:"conditional compilation"})," and the ",(0,r.jsx)(n.code,{children:"#![feature(min_specialization)]"})," is the feature needed to enable ",(0,r.jsx)(n.a,{href:"/ja/docs/tutorials/from-zero-to-ink-hero/dex/Structure/file-structure",children:"specialization"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n\n#[openbrush::contract]\npub mod pair {\n    use openbrush::{\n        contracts::{\n            psp22::{\n                Internal,\n                *,\n            },\n        },\n        traits::Storage,\n    };\n    \n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Add the ",(0,r.jsx)(n.a,{href:"https://use.ink/macros-attributes/storage",children:"storage struct"})," and add the psp22 field:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\n#[derive(Default, Storage)]\npub struct PairContract {\n    #[storage_field]\n    psp22: psp22::Data,\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"implement PSP22 trait into your contract struct:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"    impl PSP22 for PairContract {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Add an ",(0,r.jsx)(n.code,{children:"impl"})," block for the contract and add the constructor:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"impl PairContract {\n    #[ink(constructor)]\n    pub fn new() -> Self {\n        Self { psp22: Default::default() }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Your contract should look like the following, and build if you run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"cargo contract build\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n\n#[openbrush::contract]\npub mod pair {\n    use openbrush::{\n        contracts::{\n            psp22::{\n                Internal,\n                *,\n            },\n        },\n        traits::Storage,\n    };\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct PairContract {\n        #[storage_field]\n        psp22: psp22::Data,\n    }\n\n    impl PSP22 for PairContract {}\n\n    impl PairContract {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self { psp22: Default::default() }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"contracts/pair/lib.rs"})}),"\n",(0,r.jsx)(n.h2,{id:"2-add-events",children:"2. Add Events"}),"\n",(0,r.jsxs)(n.p,{children:["You should add an ",(0,r.jsx)(n.a,{href:"https://use.ink/macros-attributes/event",children:"events struct"})," to your contract and also override the event emission methods from the PSP22 implementation.\nImport what's needed for editing events:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use ink::{\n    codegen::{\n        EmitEvent,\n        Env,\n    }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/w3f/PSPs/blob/master/PSPs/psp-22.md#events",children:"PSP22"})," emits ",(0,r.jsx)(n.code,{children:"Transfer"})," and ",(0,r.jsx)(n.code,{children:"Approval"})," events. An event is a struct with ",(0,r.jsx)(n.code,{children:"#[ink(event)]"})," ",(0,r.jsx)(n.a,{href:"https://use.ink/macros-attributes/event",children:"attribute"}),". Some fields can be marked with ",(0,r.jsx)(n.code,{children:"#[ink(topic)]"})," ",(0,r.jsx)(n.a,{href:"https://use.ink/macros-attributes/topic",children:"attribute"})," which acts as ",(0,r.jsx)(n.code,{children:"indexed"})," in Solidity:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[ink(event)]\npub struct Transfer {\n    #[ink(topic)]\n    from: Option<AccountId>,\n    #[ink(topic)]\n    to: Option<AccountId>,\n    value: Balance,\n}\n\n#[ink(event)]\npub struct Approval {\n    #[ink(topic)]\n    owner: AccountId,\n    #[ink(topic)]\n    spender: AccountId,\n    value: Balance,\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["And finally, override the event emitting methods of the PSP22 Internal trait (Due to ink!'s ",(0,r.jsx)(n.a,{href:"https://github.com/paritytech/ink/issues/809",children:"design"})," it is not possible to share event definitions between multiple contracts since events can only be defined in the ink! module scope directly.):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"impl Internal for PairContract {\n    fn _emit_transfer_event(\n        &self,\n        from: Option<AccountId>,\n        to: Option<AccountId>,\n        amount: Balance,\n    ) {\n        self.env().emit_event(Transfer {\n            from,\n            to,\n            value: amount,\n        });\n    }\n\n    fn _emit_approval_event(&self, owner: AccountId, spender: AccountId, amount: Balance) {\n        self.env().emit_event(Approval {\n            owner,\n            spender,\n            value: amount,\n        });\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"3-override-generic-function-of-psp22",children:"3. Override Generic Function of PSP22"}),"\n",(0,r.jsxs)(n.p,{children:["The PSP22 OpenBrush implementation has a built-in check for a zero account in ",(0,r.jsx)(n.a,{href:"https://github.com/Supercolony-net/openbrush-contracts/blob/e366f6ff1e5892c6a624833dd337a6da16a06baa/contracts/src/token/psp22/psp22.rs#L270",children:"mint"}),", ",(0,r.jsx)(n.a,{href:"https://github.com/Supercolony-net/openbrush-contracts/blob/e366f6ff1e5892c6a624833dd337a6da16a06baa/contracts/src/token/psp22/psp22.rs#L286",children:"burn"}),", ",(0,r.jsx)(n.a,{href:"https://github.com/Supercolony-net/openbrush-contracts/blob/e366f6ff1e5892c6a624833dd337a6da16a06baa/contracts/src/token/psp22/psp22.rs#L223",children:"transfer_from"})," and ",(0,r.jsx)(n.a,{href:"https://github.com/Supercolony-net/openbrush-contracts/blob/e366f6ff1e5892c6a624833dd337a6da16a06baa/contracts/src/token/psp22/psp22.rs#L257",children:"approve"})," functions. But Uniswap V2 uses the zero address to ",(0,r.jsx)(n.a,{href:"https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2Pair.sol#L121",children:"lock tokens"}),".\nThe upside in our case is that we can override any functions of the generic implementation, by using the same function body, but removing the check for the zero address:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"impl Internal for PairContract {\n    // in uniswapv2 no check for zero account\n    fn _mint_to(&mut self, account: AccountId, amount: Balance) -> Result<(), PSP22Error> {\n        let mut new_balance = self._balance_of(&account);\n        new_balance += amount;\n        self.psp22.balances.insert(&account, &new_balance);\n        self.psp22.supply += amount;\n        self._emit_transfer_event(None, Some(account), amount);\n        Ok(())\n    }\n\n    fn _burn_from(&mut self, account: AccountId, amount: Balance) -> Result<(), PSP22Error> {\n        let mut from_balance = self._balance_of(&account);\n\n        if from_balance < amount {\n            return Err(PSP22Error::InsufficientBalance)\n        }\n\n        from_balance -= amount;\n        self.psp22.balances.insert(&account, &from_balance);\n        self.psp22.supply -= amount;\n        self._emit_transfer_event(Some(account), None, amount);\n        Ok(())\n    }\n\n    fn _approve_from_to(\n        &mut self,\n        owner: AccountId,\n        spender: AccountId,\n        amount: Balance,\n    ) -> Result<(), PSP22Error> {\n        self.psp22.allowances.insert(&(&owner, &spender), &amount);\n        self._emit_approval_event(owner, spender, amount);\n        Ok(())\n    }\n\n    fn _transfer_from_to(\n        &mut self,\n        from: AccountId,\n        to: AccountId,\n        amount: Balance,\n        _data: Vec<u8>,\n    ) -> Result<(), PSP22Error> {\n        let from_balance = self._balance_of(&from);\n\n        if from_balance < amount {\n            return Err(PSP22Error::InsufficientBalance)\n        }\n\n        self.psp22.balances.insert(&from, &(from_balance - amount));\n        let to_balance = self._balance_of(&to);\n        self.psp22.balances.insert(&to, &(to_balance + amount));\n\n        self._emit_transfer_event(Some(from), Some(to), amount);\n        Ok(())\n    }\n    ...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Also in Uniswap V2 max allowance will not ",(0,r.jsx)(n.a,{href:"https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2ERC20.sol#L74",children:"decrease allowance"}),". For this, we need to override ",(0,r.jsx)(n.code,{children:"transfer_from"})," and not decrease allowance if it's u128::MAX.\nImportant here: please note that ",(0,r.jsx)(n.code,{children:"#[ink(message)]"})," is needed in order to compile correctly. Inside the existing ",(0,r.jsx)(n.code,{children:"impl PSP22"})," block, add:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"impl PSP22 for PairContract {\n    #[ink(message)]\n    fn transfer_from(\n        &mut self,\n        from: AccountId,\n        to: AccountId,\n        value: Balance,\n        data: Vec<u8>,\n    ) -> Result<(), PSP22Error> {\n        let caller = self.env().caller();\n        let allowance = self._allowance(&from, &caller);\n\n        // In uniswapv2 max allowance never decrease\n        if allowance != u128::MAX {\n            if allowance < value {\n                return Err(PSP22Error::InsufficientAllowance)\n            }\n\n            self._approve_from_to(from, caller, allowance - value)?;\n        }\n        self._transfer_from_to(from, to, value, data)?;\n        Ok(())\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Import Vec from ",(0,r.jsx)(n.code,{children:"ink::prelude"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:" use ink::prelude::vec::Vec;\n"})}),"\n",(0,r.jsx)(n.p,{children:"And that's it! You implemented PSP22, its event and overrode its default implementation. Check your Pair contract (run in contract folder):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"cargo contract build\n"})}),"\n",(0,r.jsxs)(n.p,{children:["It should now look like this ",(0,r.jsx)(n.a,{href:"https://github.com/AstarNetwork/wasm-tutorial-dex/tree/tutorial/psp22",children:"branch"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>s});var r=t(67294);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);