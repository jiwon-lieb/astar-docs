"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[4846],{62444:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=n(85893),i=n(11151);const r={},a="Transfer Asset",c={id:"build/EVM/precompiles/xcm/transfer-asssets",title:"Transfer Asset",description:"Let's use transfer_multiasset to:",source:"@site/docs/build/EVM/precompiles/xcm/transfer-asssets.md",sourceDirName:"build/EVM/precompiles/xcm",slug:"/build/EVM/precompiles/xcm/transfer-asssets",permalink:"/ja/docs/build/EVM/precompiles/xcm/transfer-asssets",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/EVM/precompiles/xcm/transfer-asssets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Transfer native token",permalink:"/ja/docs/build/EVM/precompiles/xcm/native-transfer"},next:{title:"Withdraw Asset",permalink:"/ja/docs/build/EVM/precompiles/xcm/withdraw-assets"}},o={},l=[{value:"1. Asset Address",id:"1-asset-address",level:4},{value:"2. Beneficiary Multilocation",id:"2-beneficiary-multilocation",level:4},{value:"3. Weight",id:"3-weight",level:4},{value:"4. calling XCM precompiles",id:"4-calling-xcm-precompiles",level:4}];function d(e){const s={a:"a",br:"br",code:"code",h1:"h1",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"transfer-asset",children:"Transfer Asset"}),"\n",(0,t.jsxs)(s.p,{children:["Let's use ",(0,t.jsx)(s.code,{children:"transfer_multiasset"})," to:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["transfer asset id = 1 token from ",(0,t.jsx)(s.code,{children:"parachainId"})," ",(0,t.jsx)(s.strong,{children:"2000"})," to ",(0,t.jsx)(s.code,{children:"parachainId"})," ",(0,t.jsx)(s.strong,{children:"2007"})]}),"\n",(0,t.jsxs)(s.li,{children:["for amount ",(0,t.jsx)(s.strong,{children:"10000000000000000000000"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"1-asset-address",children:"1. Asset Address"}),"\n",(0,t.jsxs)(s.p,{children:["The assetId = 1 is defined with: address = '0xFFFFFFFF...' + DecimalToHex(AssetId) resulting to : ",(0,t.jsx)(s.code,{children:"0xFfFFFFff00000000000000000000000000000001"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-solidity",children:"address assetAddress = 0xFfFFFFff00000000000000000000000000000001;\n"})}),"\n",(0,t.jsx)(s.h4,{id:"2-beneficiary-multilocation",children:"2. Beneficiary Multilocation"}),"\n",(0,t.jsxs)(s.p,{children:["Let's suppose the ",(0,t.jsx)(s.code,{children:"beneficiary"})," is the EVM address ",(0,t.jsx)(s.code,{children:"0xd43593c715fdd31c61141abd04a99fd6822c8558"})," of the contract in parachain ",(0,t.jsx)(s.strong,{children:"2007"}),". The Multilocation is ",(0,t.jsx)(s.code,{children:"{ parents: 1, interior: X2 [Parachain: 2007, AccountId20: { id: *caller address* , network: any }] }"}),".",(0,t.jsx)(s.br,{}),"\n","The interior field is of type H160 (20 bytes EVM address) so prefixed with 0x03 and suffix with 0x00 (network: any). The interior bytes are 0x03 + EVM address + 0x00"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-solidity",children:'bytes[] memory interior = new bytes[](2);\ninterior[0] = bytes.concat(hex"00", bytes4(uint32(2007)));\ninterior[1] = bytes.concat(hex"03", msg.sender, hex"00");\nXCM.Multilocation memory destination = XCM.Multilocation({\n    parents: 1,\n    interior: interior\n});\n'})}),"\n",(0,t.jsx)(s.h4,{id:"3-weight",children:"3. Weight"}),"\n",(0,t.jsx)(s.p,{children:"The weight we want to buy in the destination chain, to set the weightlimit to Unlimited, you should use the value 0 for ref_time."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-solidity",children:"XCM.WeightV2 memory weight = XCM.WeightV2({\n    ref_time: 30_000_000_000,\n    proof_size: 300_000\n});\n"})}),"\n",(0,t.jsx)(s.h4,{id:"4-calling-xcm-precompiles",children:"4. calling XCM precompiles"}),"\n",(0,t.jsx)(s.p,{children:"Import the XCM precompiles in your contract and call it like this:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-solidity",children:'address public constant XCM_ADDRESS =\n0x0000000000000000000000000000000000005004;\n\nrequire(\n    XCM(XCM_ADDRESS).transfer(\n        assetAddress,\n        amount,\n        destination,\n        weight\n    ),\n    "Failed to send xcm"\n);\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Please check full example in the ",(0,t.jsx)(s.a,{href:"https://github.com/AstarNetwork/EVM-XCM-Examples/tree/main/contracts/transfer-assets",children:"XCM EVM SDK"})]})]})}function h(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,s,n)=>{n.d(s,{Z:()=>c,a:()=>a});var t=n(67294);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);