"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[6997],{15205:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>n,metadata:()=>o,toc:()=>u});var i=t(85893),r=t(11151);t(3837);const n={},a="Subsquid",o={id:"build/zkEVM/integrations/indexers/subsquid",title:"Subsquid",description:"Overview",source:"@site/docs/build/zkEVM/integrations/indexers/subsquid.md",sourceDirName:"build/zkEVM/integrations/indexers",slug:"/build/zkEVM/integrations/indexers/subsquid",permalink:"/docs/build/zkEVM/integrations/indexers/subsquid",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/zkEVM/integrations/indexers/subsquid.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SubQuery",permalink:"/docs/build/zkEVM/integrations/indexers/subquery"},next:{title:"Startale Labs",permalink:"/docs/build/zkEVM/integrations/node-providers/startale-labs"}},d={},u=[{value:"Overview",id:"overview",level:2}];function c(e){const s={a:"a",h1:"h1",h2:"h2",p:"p",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"subsquid",children:"Subsquid"}),"\n",(0,i.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://subsquid.io",children:"Subsquid"})," is an indexing framework supporting both ",(0,i.jsx)(s.a,{href:"/docs/learn/architecture/astar-parachain#substrate",children:"Substrate"})," and ",(0,i.jsx)(s.a,{href:"/docs/learn/architecture/astar-parachain#ethereum-virtual-machine-evm",children:"EVM"}),"-based chains. It is ",(0,i.jsx)(s.a,{href:"https://docs.subsquid.io/migrate/subsquid-vs-thegraph/",children:"extremely flexible and offers high syncing speeds"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:['Subsquid indexer projects (or "squids") can be made from templates either manually or with ',(0,i.jsx)(s.a,{href:"https://docs.subsquid.io/basics/squid-gen/",children:"squid generation tools"}),". The tools make ready-to-use indexer projects out of contracts' ABIs. The generated squids decode events and transactions of user-specified contracts, then serve the data over a GraphQL API or store it as a dataset on a filesystem. At the moment EVM/Solidity contracts are supported, with WASM/ink! contracts in the pipeline. Consider this route if your use case does not require any nontrivial transformations of blockchain data."]}),"\n",(0,i.jsxs)(s.p,{children:["Please visit the ",(0,i.jsx)(s.a,{href:"/docs/build/integrations/indexers/subsquid",children:"main integrations section"})," for more information about using Subsquid on Astar zkEVM."]})]})}function l(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3837:(e,s,t)=>{t.d(s,{Z:()=>r});t(67294);var i=t(85893);function r(e){let{src:s,caption:t,width:r="460px"}=e;return(0,i.jsxs)("center",{children:[(0,i.jsx)("br",{}),(0,i.jsxs)("figure",{children:[(0,i.jsx)("img",{src:s,alt:t,width:r}),(0,i.jsx)("figcaption",{children:t})]}),(0,i.jsx)("br",{})]})}},11151:(e,s,t)=>{t.d(s,{Z:()=>o,a:()=>a});var i=t(67294);const r={},n=i.createContext(r);function a(e){const s=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(n.Provider,{value:s},e.children)}}}]);