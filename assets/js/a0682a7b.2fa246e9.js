"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[9651],{60282:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var a=n(85893),t=n(11151);const i={},r="Account Unification",c={id:"build/astar-beta-labs/account-unification/index",title:"Account Unification",description:"Overview",source:"@site/docs/build/astar-beta-labs/account-unification/index.md",sourceDirName:"build/astar-beta-labs/account-unification",slug:"/build/astar-beta-labs/account-unification/",permalink:"/docs/build/astar-beta-labs/account-unification/",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/astar-beta-labs/account-unification/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Astar Beta Labs",permalink:"/docs/build/astar-beta-labs/"},next:{title:"How to create a unified account",permalink:"/docs/build/astar-beta-labs/account-unification/users_guide"}},d={},o=[{value:"Overview",id:"overview",level:2},{value:"How does <code>frontier</code> handle accounts?",id:"how-does-frontier-handle-accounts",level:3},{value:"How does <code>XVM</code> handle accounts?",id:"how-does-xvm-handle-accounts",level:3},{value:"What is Account Unification?",id:"what-is-account-unification",level:2},{value:"How does AU work?",id:"how-does-au-work",level:2},{value:"<code>pallet-unified-accounts</code>",id:"pallet-unified-accounts",level:3},{value:"New Possibilities",id:"new-possibilities",level:2},{value:"Unified Balance",id:"unified-balance",level:3},{value:"Transfer XC20 to Native Addresses",id:"transfer-xc20-to-native-addresses",level:3},{value:"Transfer funds directly to EVM Address",id:"transfer-funds-directly-to-evm-address",level:3},{value:"Things to consider",id:"things-to-consider",level:2},{value:"Mappings are immutable",id:"mappings-are-immutable",level:3},{value:"Manually transfer the native state (including funds)",id:"manually-transfer-the-native-state-including-funds",level:3},{value:"Problems with EVM Indexers &amp; Explorers",id:"problems-with-evm-indexers--explorers",level:3}];function l(e){const s={a:"a",admonition:"admonition",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msub:"msub",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h1,{id:"account-unification",children:"Account Unification"}),"\n",(0,a.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(s.p,{children:"Astar Substrate is a Multi-VM chain that consists of Astar EVM and Astar Native (Wasm) smart contract environments that are interoperable in nature. This allows developers to create impactful and innovative solutions for end users on top of Astar Substrate, however, it comes at the expense of what is considered good UX."}),"\n",(0,a.jsx)(s.p,{children:"Astar EVM is powered by Frontier (a combination of pallets and client for emulating EVM networks) which enables Astar Substrate to run a highly ETH equivilent L1 chain on top of a Substrate-based chain. Since both EVM and Native Substrate chains have independent address and signature schemes that are distinct from one another, interoperability between them becomes a challenge."}),"\n",(0,a.jsx)(s.p,{children:"The Astar Substrate chain consists of:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Astar Substrate EVM: This is powered by ",(0,a.jsx)(s.a,{href:"https://github.com/paritytech/frontier",children:(0,a.jsx)(s.code,{children:"frontier"})})," and uses ETH address schemes where user address is ",(0,a.jsx)(s.code,{children:"H160"})]}),"\n",(0,a.jsxs)(s.li,{children:["Astar Substrate Native (Wasm): The address scheme is ",(0,a.jsx)(s.code,{children:"AccountId32"})," where user address is described in ",(0,a.jsx)(s.code,{children:"SS58"})," format."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["All the solutions that require performing actions on other VMs, i.e interoperability between VMs like ",(0,a.jsx)(s.code,{children:"XVM"})," and ",(0,a.jsx)(s.code,{children:"frontier"}),", require a deterministic way of converting their addresses to the other VM\u2019s address scheme."]}),"\n",(0,a.jsx)(s.admonition,{type:"caution",children:(0,a.jsx)(s.p,{children:"Throughout this doc we will use words \u201caddress\u201d and \u201caccount\u201d interchangeably, although they are different in literal sense, in the context of this doc they are treated the same."})}),"\n",(0,a.jsx)(s.admonition,{type:"info",children:(0,a.jsxs)(s.p,{children:["Account Unification codebase has been audited in December 2023 - Audit report is available on ",(0,a.jsx)(s.a,{href:"https://github.com/AstarNetwork/Audits",children:"Astar Network Audit Reports"})]})}),"\n",(0,a.jsxs)(s.h3,{id:"how-does-frontier-handle-accounts",children:["How does ",(0,a.jsx)(s.code,{children:"frontier"})," handle accounts?"]}),"\n",(0,a.jsxs)(s.p,{children:["Put simply, there are a set of Native Substrate accounts existing in parallel to the EVM accounts managed by the ",(0,a.jsx)(s.code,{children:"frontier"})," pallet, and one-to-one mappings from the Substrate accounts to EVM accounts are defined by a conversion trait called ",(0,a.jsx)(s.code,{children:"AddressMapping"})," in the ",(0,a.jsx)(s.code,{children:"frontier"})," pallet\u2019s config."]}),"\n",(0,a.jsxs)(s.p,{children:["For each H160 address, the EVM pallet uses ",(0,a.jsx)(s.code,{children:"AddressMapping"})," to generate a corresponding SS58 address, which is the account that's ",(0,a.jsx)(s.em,{children:"actually"})," used to interact with the native side of chain, including by holding its balance in ",(0,a.jsx)(s.code,{children:"pallet-balances"}),". So, the native balance is ",(0,a.jsx)(s.em,{children:"actually"})," stored in ",(0,a.jsx)(s.code,{children:"pallet-balances"})," via the SS58 address generated by the mapping."]}),"\n",(0,a.jsx)(s.p,{children:"In short, every EVM address used on the Astar Substrate EVM has an SS58 counterpart existing on the Native side, so, in a sense, the generated SS58 account acts as the backend for all the operations of the H160 native account."}),"\n",(0,a.jsx)(s.span,{className:"katex-display",children:(0,a.jsxs)(s.span,{className:"katex",children:[(0,a.jsx)(s.span,{className:"katex-mathml",children:(0,a.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,a.jsxs)(s.semantics,{children:[(0,a.jsxs)(s.mrow,{children:[(0,a.jsx)(s.mi,{children:"A"}),(0,a.jsx)(s.mi,{children:"d"}),(0,a.jsx)(s.mi,{children:"d"}),(0,a.jsx)(s.mi,{children:"r"}),(0,a.jsx)(s.mi,{children:"e"}),(0,a.jsx)(s.mi,{children:"s"}),(0,a.jsx)(s.mi,{children:"s"}),(0,a.jsx)(s.mi,{children:"M"}),(0,a.jsx)(s.mi,{children:"a"}),(0,a.jsx)(s.mi,{children:"p"}),(0,a.jsx)(s.mi,{children:"p"}),(0,a.jsx)(s.mi,{children:"i"}),(0,a.jsx)(s.mi,{children:"n"}),(0,a.jsx)(s.mi,{children:"g"}),(0,a.jsx)(s.mo,{stretchy:"false",children:"("}),(0,a.jsx)(s.mi,{children:"H"}),(0,a.jsx)(s.mn,{children:"16"}),(0,a.jsxs)(s.msub,{children:[(0,a.jsx)(s.mn,{children:"0"}),(0,a.jsx)(s.mi,{children:"A"})]}),(0,a.jsx)(s.mo,{stretchy:"false",children:")"}),(0,a.jsx)(s.mo,{children:"="}),(0,a.jsx)(s.mo,{children:">"}),(0,a.jsx)(s.mi,{children:"S"}),(0,a.jsx)(s.mi,{children:"S"}),(0,a.jsx)(s.mn,{children:"5"}),(0,a.jsxs)(s.msub,{children:[(0,a.jsx)(s.mn,{children:"8"}),(0,a.jsx)(s.mi,{children:"A"})]})]}),(0,a.jsx)(s.annotation,{encoding:"application/x-tex",children:"AddressMapping(H160_A) => SS58_A\n"})]})})}),(0,a.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"dd"}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"ress"}),(0,a.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"M"}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"pp"}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"in"}),(0,a.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,a.jsx)(s.span,{className:"mopen",children:"("}),(0,a.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.08125em"},children:"H"}),(0,a.jsx)(s.span,{className:"mord",children:"16"}),(0,a.jsxs)(s.span,{className:"mord",children:[(0,a.jsx)(s.span,{className:"mord",children:"0"}),(0,a.jsx)(s.span,{className:"msupsub",children:(0,a.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(s.span,{className:"vlist-r",children:[(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,a.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})}),(0,a.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(s.span,{className:"vlist-r",children:(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(s.span,{})})})]})})]}),(0,a.jsx)(s.span,{className:"mclose",children:")"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,a.jsx)(s.span,{className:"mrel",children:"=>"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,a.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"SS"}),(0,a.jsx)(s.span,{className:"mord",children:"5"}),(0,a.jsxs)(s.span,{className:"mord",children:[(0,a.jsx)(s.span,{className:"mord",children:"8"}),(0,a.jsx)(s.span,{className:"msupsub",children:(0,a.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(s.span,{className:"vlist-r",children:[(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,a.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})}),(0,a.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(s.span,{className:"vlist-r",children:(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(s.span,{})})})]})})]})]})]})]})}),"\n",(0,a.jsx)(s.p,{children:"This architecture makes it easier for the EVM side chain to interact seamlessly with the native chain. For example we can wrap the pallet\u2019s interfaces via precompiles for EVM users to consume, and all the pallet\u2019s calls will originate from the SS58 address."}),"\n",(0,a.jsx)(s.p,{children:"Problems associated with this,"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Since the SS58 address is generated using hashed derivation formula, there is no known private key attached to it. Thus, a user can\u2019t control it directly; actually, no one can."}),"\n",(0,a.jsx)(s.li,{children:"The mapping happens in one direction only, i.e from H160 \u2192 SS58. We can obtain an SS58 address that's associated with an H160 but it doesn't go the other way around in order to derive an H160 address from a given SS58."}),"\n"]}),"\n",(0,a.jsxs)(s.h3,{id:"how-does-xvm-handle-accounts",children:["How does ",(0,a.jsx)(s.code,{children:"XVM"})," handle accounts?"]}),"\n",(0,a.jsx)(s.p,{children:"Since XVM allows smart contracts from either VM to call each other, we require a way to convert addresses both ways."}),"\n",(0,a.jsxs)(s.p,{children:["Before Account Unification, the XVM pallet used the same ",(0,a.jsx)(s.code,{children:"AddressMapping"})," trait from the ",(0,a.jsx)(s.code,{children:"frontier"})," pallet for conversions from H160 \u2192 SS58 and ",(0,a.jsx)(s.code,{children:"AccountMapping"})," (a new trait) for conversions from SS58 \u2192 H160."]}),"\n",(0,a.jsx)(s.p,{children:"Since the conversions are one way only, this is not a complete solution. That means there is no way to derive the original address from a generated address, if wanting to go in the other direction."}),"\n",(0,a.jsx)(s.h2,{id:"what-is-account-unification",children:"What is Account Unification?"}),"\n",(0,a.jsx)(s.p,{children:"AU is designed to solve the core problems described above:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"No double mapping"}),": This has the most impact since without it we can\u2019t go back on a generated address. For example, if we have a SS58 corresponding to H160, we can\u2019t know which H160 it belonged to."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Users can\u2019t control the generated address:"})," This is more on UX side, since Astar is a Cross-VM, users are encouraged to engage with both EVM and native Wasm ecosystems equally, but managing two different accounts for two VMs that are not interchangeable with one another is bad UX, from user\u2019s perspective."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["Account Unification (AU) provides users the ability to bind their H160 and SS58 addresses together and create double mappings, which can then be used by low-level solutions that require address conversions, such as EVM (i.e ",(0,a.jsx)(s.code,{children:"frontier"}),") and XVM."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{alt:"Without-Unification",src:n(50147).Z+"",width:"2498",height:"1392"})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{alt:"With-Unification",src:n(62574).Z+"",width:"2530",height:"1402"})}),"\n",(0,a.jsx)(s.h2,{id:"how-does-au-work",children:"How does AU work?"}),"\n",(0,a.jsxs)(s.p,{children:["We introduced a new pallet called ",(0,a.jsx)(s.a,{href:"https://github.com/AstarNetwork/Astar/tree/master/pallets/unified-accounts",children:(0,a.jsx)(s.code,{children:"pallet-unified-accounts"})})," responsible for managing double mappings between address schemes (H160 and SS58)."]}),"\n",(0,a.jsx)(s.h3,{id:"pallet-unified-accounts",children:(0,a.jsx)(s.code,{children:"pallet-unified-accounts"})}),"\n",(0,a.jsx)(s.p,{children:"The Unified Accounts pallet provides functionality for native account holders to connect their EVM address and have a unified experience across the different VMs by providing an ETH signature to prove their ownership over their EVM Address."}),"\n",(0,a.jsx)(s.p,{children:"The pallet has two dispatch-able calls,"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"claim_evm_address"})," : Users can submit a signature to prove their ownership over the EVM address and therefore claim it, thus creating a double mapping between these accounts, SS58 and H160."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"claim_default_evm_address"}),": If a user is not interested in controlling the generated account and only wants to have a double mapping, this is used. It creates a double mapping based on the (existing) default generated EVM address."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["The Unified Accounts pallet provides implementations of various address conversion traits that can consumed by other solutions, such as ",(0,a.jsx)(s.code,{children:"AddressMapping"})," for ",(0,a.jsx)(s.code,{children:"frontier"})," and ",(0,a.jsx)(s.code,{children:"AccountMapping"})," for ",(0,a.jsx)(s.code,{children:"XVM"}),"."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Signature Scheme"})}),"\n",(0,a.jsxs)(s.p,{children:["Users need to provide a valid ",(0,a.jsx)(s.a,{href:"https://eips.ethereum.org/EIPS/eip-712",children:"EIP712 signed payload"})," of their SS58 address. The payload for EIP712 signatures consists of two parts, domain hash and type hash with the actual payload."]}),"\n",(0,a.jsxs)(s.p,{children:["Below is a very simple snippet to produce the signed payload and claim accounts using ",(0,a.jsx)(s.code,{children:"ethers.js"}),","]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-jsx",children:'async function buildSignature(signer, substrateAddress, api, chainId) {\n  return await signer.signTypedData(\n    {\n      chainId: chainId, // evm chain id\n      name: "Astar EVM Claim", // app name\n      version: "1", // version\n      salt: await api.query.system.blockHash(0), // genesis hash\n    },\n    {\n      Claim: [{ name: "substrateAddress", type: "bytes" }],\n    },\n    {\n      substrateAddress,\n    }\n  );\n}\n'})}),"\n",(0,a.jsx)(s.h2,{id:"new-possibilities",children:"New Possibilities"}),"\n",(0,a.jsx)(s.p,{children:"After AU there are a lot of new possibilities enabled by the double mappings between account schemes. Some of the impactful ones are below,"}),"\n",(0,a.jsx)(s.h3,{id:"unified-balance",children:"Unified Balance"}),"\n",(0,a.jsxs)(s.p,{children:["After the accounts are unifed, they\u2019ll share the same balances across EVM and Substrate Native. This is true for native assets like XC20 (",(0,a.jsx)(s.code,{children:"pallet-assets"}),"), as well as native balances (",(0,a.jsx)(s.code,{children:"pallet-balances"}),")."]}),"\n",(0,a.jsx)(s.h3,{id:"transfer-xc20-to-native-addresses",children:"Transfer XC20 to Native Addresses"}),"\n",(0,a.jsx)(s.p,{children:"Previously there was no proper way to transfer XC20 Assets to a native account. AU changes this, and if the recipient user has AU enabled then the user/dapp can fetch the connected EVM address and send the tokens to that address, as both accounts (native and EVM) are unified."}),"\n",(0,a.jsx)(s.h3,{id:"transfer-funds-directly-to-evm-address",children:"Transfer funds directly to EVM Address"}),"\n",(0,a.jsxs)(s.p,{children:["Users can now transfer funds directly to their EVM address without the need to calculate a derived SS58 address (i.e selecting ",(0,a.jsx)(s.code,{children:"Address20"})," in Lookup values.)"]}),"\n",(0,a.jsxs)(s.p,{children:["This is valid for all EVM addresses and ",(0,a.jsx)(s.em,{children:"does not require AU to be enabled."})]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{alt:"Lookup-Use",src:n(7736).Z+"",width:"1528",height:"778"})}),"\n",(0,a.jsx)(s.h2,{id:"things-to-consider",children:"Things to consider"}),"\n",(0,a.jsx)(s.p,{children:"If it's too good to be true then it probably is!"}),"\n",(0,a.jsx)(s.h3,{id:"mappings-are-immutable",children:"Mappings are immutable"}),"\n",(0,a.jsx)(s.p,{children:"Under the current design, once mappings are in place they cannot be modified. This is a precautionary measure to prevent loss of funds and other potential mishaps since the act of modifying the underlying SS58 address of an EVM account is very sensitive."}),"\n",(0,a.jsx)(s.p,{children:"Since accounts are dispensable, if a user wishes to change mappings he/she can simply create a new set of accounts to be connected."}),"\n",(0,a.jsx)(s.h3,{id:"manually-transfer-the-native-state-including-funds",children:"Manually transfer the native state (including funds)"}),"\n",(0,a.jsx)(s.p,{children:"Since before unifying the accounts any interaction from the EVM to the Native side is performed via the default derived account, including all the holdings\nof native funds like XC20, dAppStaking rewards (if interacted with staking precompiles), etc, thus they need to be transferred to the new SS58 account before accounts are unified otherwise the funds will be lost. The pallet only handles the transfer of native balances, and all other native assets need to be transferred manually."}),"\n",(0,a.jsx)(s.p,{children:"Also for EVM smart contract developers, if a contract is XVM enabled and it calls into a Wasm contract, there should be a mechanism in place to migrate the state to a new SS58 account so that users can do that before unifying accounts."}),"\n",(0,a.jsx)(s.admonition,{type:"caution",children:(0,a.jsxs)(s.p,{children:["It is strongly advised to use only the Astar Portal for unifying accounts as it is designed to handle the asset transfer process properly. ",(0,a.jsx)(s.strong,{children:"If the pallet\u2019s extrinsics are used directly then native funds will be lost forever."})]})}),"\n",(0,a.jsx)(s.h3,{id:"problems-with-evm-indexers--explorers",children:"Problems with EVM Indexers & Explorers"}),"\n",(0,a.jsx)(s.p,{children:"Once accounts are unified they share balances (XC20, native balance) and both accounts can control them."}),"\n",(0,a.jsx)(s.p,{children:"When balances are updated on the native side there are no logs or events emitted on the EVM side, thus indexers and block explorers face problems displaying accurate balances for native assets."})]})}function h(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},7736:(e,s,n)=>{n.d(s,{Z:()=>a});const a=n.p+"assets/images/lookup-f2923dae2f47a1ad3ffc6b6f90f9b3e8.png"},62574:(e,s,n)=>{n.d(s,{Z:()=>a});const a=n.p+"assets/images/with-b6b2a0751c8ec22d075099be17d9d09b.png"},50147:(e,s,n)=>{n.d(s,{Z:()=>a});const a=n.p+"assets/images/without-6ac89d89477ea8fdfd7de53942e5c9f4.png"},11151:(e,s,n)=>{n.d(s,{Z:()=>c,a:()=>r});var a=n(67294);const t={},i=a.createContext(t);function r(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);