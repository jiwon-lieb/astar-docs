"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[9549],{37676:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var s=t(85893),a=t(11151);const i={sidebar_position:2},r="How to get started with AstarBase",l={id:"build/builder-guides/astar_features/astarBase",title:"How to get started with AstarBase",description:"TL;DR",source:"@site/docs/build/builder-guides/astar_features/astarBase.md",sourceDirName:"build/builder-guides/astar_features",slug:"/build/builder-guides/astar_features/astarBase",permalink:"/docs/build/builder-guides/astar_features/astarBase",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/builder-guides/astar_features/astarBase.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"How to run a local Astar blockchain for contract testing",permalink:"/docs/build/builder-guides/astar_features/run_local_network"},next:{title:"How to use Truffle to deploy on Shibuya",permalink:"/docs/build/builder-guides/astar_features/truffle"}},d={},o=[{value:"TL;DR",id:"tldr",level:2},{value:"What is AstarBase",id:"what-is-astarbase",level:2},{value:"Functions available in AstarBase",id:"functions-available-in-astarbase",level:3},{value:"Create a simple dApp using AstarBase",id:"create-a-simple-dapp-using-astarbase",level:2},{value:"Step 1:",id:"step-1",level:3},{value:"Step 2:",id:"step-2",level:3},{value:"Step 3:",id:"step-3",level:3},{value:"Step 4:",id:"step-4",level:3},{value:"Step 5:",id:"step-5",level:3},{value:"Step 6:",id:"step-6",level:3},{value:"Reference",id:"reference",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"how-to-get-started-with-astarbase",children:"How to get started with AstarBase"}),"\n",(0,s.jsx)(n.h2,{id:"tldr",children:"TL;DR"}),"\n",(0,s.jsx)(n.p,{children:'This cookbook will learn you on how to started using AstarBase. AstarBase is an on-chain EVM database in Astar Ecosystem. After reading this, you will be able to make a small "Hello World" use case of AstarBase yourself.'}),"\n",(0,s.jsx)(n.h2,{id:"what-is-astarbase",children:"What is AstarBase"}),"\n",(0,s.jsx)(n.p,{children:"AstarBase is an on-chain EVM database. AstarBase contains the mapping of users's EVM and native address. An EVM address is usually referred as a Metamask address or H160, native address can be referred as a SS58 address. These two are now interchangeable through the mapping that AstarBase offers."}),"\n",(0,s.jsx)(n.p,{children:"The main goal of AstarBase is creating more end-user cases for users to participate in the Astar ecosystem by offering some mechanisms such as rewarding users easily."}),"\n",(0,s.jsx)(n.h3,{id:"functions-available-in-astarbase",children:"Functions available in AstarBase"}),"\n",(0,s.jsx)(n.p,{children:"We have three major functions in AstarBase."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"function isRegistered(address evmAddress) \n    external view \n    returns (bool);\n"})}),"\n",(0,s.jsx)(n.p,{children:"This code snippet checks if the given address was registered in AstarBase."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"function checkStakerStatus(address evmAddress)\n    external view\n    returns (uint128);\n"})}),"\n",(0,s.jsx)(n.p,{children:"This code snippet checks if the pair of addresses (SS58 & EVM) is an active staker in dApps Staking and returns the staked amount."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"function checkStakerStatusOnContract(address evmAddress, address stakingContract)\n    external view\n    returns (uint128);\n"})}),"\n",(0,s.jsx)(n.p,{children:"This code snippet checks if the pair of addresses (SS58 & EVM) is an active staker in dApps Staking on the specified contract and returns the staked amount."}),"\n",(0,s.jsx)(n.h2,{id:"create-a-simple-dapp-using-astarbase",children:"Create a simple dApp using AstarBase"}),"\n",(0,s.jsx)(n.p,{children:"We will work on a simple \u201cHello World\u201d dApp which has a simple frontend to show a practical use case of AstarBase."}),"\n",(0,s.jsx)(n.p,{children:"Our showcase checks if certain user is a registered user in AstarBase. One application of this would be to pick a loyal user."}),"\n",(0,s.jsx)(n.h3,{id:"step-1",children:"Step 1:"}),"\n",(0,s.jsx)(n.p,{children:"First, we will create a simple front end. In this example, we use React.js by running the command below."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx create-react-app my-app\ncd my-app\nnpm start\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-2",children:"Step 2:"}),"\n",(0,s.jsx)(n.p,{children:"We slightly modify the frontend in App.js file so that now when a user clicks a button. The log on console shows if a certain user is registered in AstarBase."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'return (\n    <div className="App">\n      <button onClick={handleCall}>Try this</button>\n    </div>\n  );\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-3",children:"Step 3:"}),"\n",(0,s.jsxs)(n.p,{children:["We use a Shibuya address for this example. Add the a necessary details available from ",(0,s.jsx)(n.a,{href:"https://github.com/AstarNetwork/astarbase/blob/main/public/config/config.json",children:"here"})," in App.js file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'const web3 = new Web3(new Web3.providers.HttpProvider("[https://evm.shibuya.astar.network](https://evm.shibuya.astar.network/)"));\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-4",children:"Step 4:"}),"\n",(0,s.jsxs)(n.p,{children:["The ABI is available ",(0,s.jsx)(n.a,{href:"https://github.com/AstarNetwork/astarbase/blob/main/public/config/register_abi.json",children:"here"}),", we can now add it in App.js file. For this, we put ABI in the same file to make is easy, but you can put it in a different folder to make your code cleaner."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'const abi = [\n      {\n        "inputs": [],\n        "stateMutability": "nonpayable",\n        "type": "constructor"\n      },\n      {\n        "anonymous": false,\n        "inputs": [\n          {\n            "indexed": true,\n            "internalType": "address",\n            "name": "previousOwner",\n            "type": "address"\n          },\n          {\n            "indexed": true,\n            "internalType": "address",\n            "name": "newOwner",\n            "type": "address"\n          }\n        ],\n        "name": "OwnershipTransferred",\n        "type": "event"\n      },\n      {\n        "inputs": [],\n        "name": "DAPPS_STAKING",\n        "outputs": [\n          {\n            "internalType": "contract DappsStaking",\n            "name": "",\n            "type": "address"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [],\n        "name": "SR25519Contract",\n        "outputs": [\n          {\n            "internalType": "contract SR25519",\n            "name": "",\n            "type": "address"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [\n          {\n            "internalType": "address",\n            "name": "",\n            "type": "address"\n          }\n        ],\n        "name": "addressMap",\n        "outputs": [\n          {\n            "internalType": "bytes32",\n            "name": "",\n            "type": "bytes32"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [],\n        "name": "beneficiary",\n        "outputs": [\n          {\n            "internalType": "address",\n            "name": "",\n            "type": "address"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [\n          {\n            "internalType": "address",\n            "name": "evmAddress",\n            "type": "address"\n          }\n        ],\n        "name": "checkStakerStatus",\n        "outputs": [\n          {\n            "internalType": "uint128",\n            "name": "",\n            "type": "uint128"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [\n          {\n            "internalType": "address",\n            "name": "evmAddress",\n            "type": "address"\n          }\n        ],\n        "name": "isRegistered",\n        "outputs": [\n          {\n            "internalType": "bool",\n            "name": "",\n            "type": "bool"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [],\n        "name": "owner",\n        "outputs": [\n          {\n            "internalType": "address",\n            "name": "",\n            "type": "address"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [\n          {\n            "internalType": "bool",\n            "name": "_state",\n            "type": "bool"\n          }\n        ],\n        "name": "pause",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n      },\n      {\n        "inputs": [],\n        "name": "paused",\n        "outputs": [\n          {\n            "internalType": "bool",\n            "name": "",\n            "type": "bool"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [\n          {\n            "internalType": "bytes32",\n            "name": "ss58PublicKey",\n            "type": "bytes32"\n          },\n          {\n            "internalType": "bytes",\n            "name": "signedMsg",\n            "type": "bytes"\n          }\n        ],\n        "name": "register",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n      },\n      {\n        "inputs": [],\n        "name": "registeredCnt",\n        "outputs": [\n          {\n            "internalType": "uint256",\n            "name": "_value",\n            "type": "uint256"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [],\n        "name": "renounceOwnership",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n      },\n      {\n        "inputs": [\n          {\n            "internalType": "address",\n            "name": "_newBeneficiary",\n            "type": "address"\n          }\n        ],\n        "name": "setBeneficiary",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n      },\n      {\n        "inputs": [\n          {\n            "internalType": "uint256",\n            "name": "_newCost",\n            "type": "uint256"\n          }\n        ],\n        "name": "setUnregisterFee",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n      },\n      {\n        "inputs": [\n          {\n            "internalType": "bytes32",\n            "name": "",\n            "type": "bytes32"\n          }\n        ],\n        "name": "ss58Map",\n        "outputs": [\n          {\n            "internalType": "address",\n            "name": "",\n            "type": "address"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [\n          {\n            "internalType": "address",\n            "name": "evmAddress",\n            "type": "address"\n          }\n        ],\n        "name": "sudoUnRegister",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n      },\n      {\n        "inputs": [\n          {\n            "internalType": "address",\n            "name": "newOwner",\n            "type": "address"\n          }\n        ],\n        "name": "transferOwnership",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n      },\n      {\n        "inputs": [],\n        "name": "unRegister",\n        "outputs": [],\n        "stateMutability": "payable",\n        "type": "function"\n      },\n      {\n        "inputs": [],\n        "name": "unregisterFee",\n        "outputs": [\n          {\n            "internalType": "uint256",\n            "name": "",\n            "type": "uint256"\n          }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n      },\n      {\n        "inputs": [],\n        "name": "withdraw",\n        "outputs": [],\n        "stateMutability": "payable",\n        "type": "function"\n      }\n    ];\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-5",children:"Step 5:"}),"\n",(0,s.jsxs)(n.p,{children:["Finally, we add an example contract address available from ",(0,s.jsx)(n.a,{href:"https://github.com/AstarNetwork/astarbase/blob/main/contract/deployment-info.md",children:"here"}),". In this example, we use the Shibuya version but you can use Astar version as well as Shiden version."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'const address = "0xF183f51D3E8dfb2513c15B046F848D4a68bd3F5D";\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-6",children:"Step 6:"}),"\n",(0,s.jsx)(n.p,{children:"We will combine all what we wrote in the previous steps. For #EVM_ADDRESS, you can replace it with your specified address in EVM format."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'const smartContract = new web3.eth.Contract(abi, address);\nconst stakerStatus = await smartContract.methods.isRegistered("#EVM_ADDRESS").call();\nconsole.log(stakerStatus);\n'})}),"\n",(0,s.jsx)(n.p,{children:"In the end, this returns if a certain address is registered in AstarBase.\nThat\u2019s a wrap! Happy hacking!"}),"\n",(0,s.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Official Document for AstarBase:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/build/evm/astarbase/",children:"/docs/build/evm/astarbase/"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Official Document for creating a React app:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://reactjs.org/docs/create-a-new-react-app.html",children:"https://reactjs.org/docs/create-a-new-react-app.html"})}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>r});var s=t(67294);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);