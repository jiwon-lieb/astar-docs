"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[6890],{26510:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=r(85893),t=r(11151);const o={sidebar_position:6},s="Modifiers",i={id:"build/wasm/from-zero-to-ink-hero/dex/Pair/modifiers",title:"Modifiers",description:"Modifiers ensure certain conditions are fulfilled prior to entering a function. By defining modifiers, you will reduce code redundancy (keep it DRY), and increase its readability as you will not have to add guards for each of your functions.",source:"@site/docs/build/wasm/from-zero-to-ink-hero/dex/Pair/modifiers.md",sourceDirName:"build/wasm/from-zero-to-ink-hero/dex/Pair",slug:"/build/wasm/from-zero-to-ink-hero/dex/Pair/modifiers",permalink:"/docs/build/wasm/from-zero-to-ink-hero/dex/Pair/modifiers",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/wasm/from-zero-to-ink-hero/dex/Pair/modifiers.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Swap",permalink:"/docs/build/wasm/from-zero-to-ink-hero/dex/Pair/swap"},next:{title:"Factory Storage and Getters",permalink:"/docs/build/wasm/from-zero-to-ink-hero/dex/Factory/getters"}},c={},d=[{value:"1. Reentrancy Guard",id:"1-reentrancy-guard",level:2},{value:"2. Only Owner",id:"2-only-owner",level:2}];function l(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"modifiers",children:"Modifiers"}),"\n",(0,a.jsxs)(n.p,{children:["Modifiers ensure certain conditions are fulfilled prior to entering a function. By defining modifiers, you will reduce code redundancy (keep it DRY), and increase its readability as you will not have to add guards for each of your functions.",(0,a.jsx)(n.br,{}),"\n","The Pair contract defines and uses a ",(0,a.jsx)(n.a,{href:"https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2Pair.sol#L31",children:"lock"})," modifier that prevents reentrancy attacks. During ",(0,a.jsx)(n.strong,{children:"initialization"}),", it also ensures that the ",(0,a.jsx)(n.a,{href:"https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2Pair.sol#L67",children:"caller is the Factory"}),", so it can be used as modifier."]}),"\n",(0,a.jsx)(n.h2,{id:"1-reentrancy-guard",children:"1. Reentrancy Guard"}),"\n",(0,a.jsxs)(n.p,{children:["To protect callable functions from reentrancy attacks, we will use the ",(0,a.jsx)(n.a,{href:"https://github.com/Supercolony-net/openbrush-contracts/blob/d6e29f05fd462e4e027de1f2f9177d594a5a0f05/contracts/src/security/reentrancy_guard/mod.rs#L54",children:"reentrancy guard"})," modifier from Openbrush, which saves the lock status in storage (either ",(0,a.jsx)(n.code,{children:"ENTERED"})," or ",(0,a.jsx)(n.code,{children:"NOT_ENTERED"}),") to prevent reentrancy.\nIn the ",(0,a.jsx)(n.em,{children:"./contracts/pair/Cargo.toml"})," file, add the ",(0,a.jsx)(n.code,{children:'"reentrancy_guard"'})," feature to the Openbrush dependencies:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'openbrush = { git = "https://github.com/727-Ventures/openbrush-contracts", version = "3.0.0", default-features = false, features = ["psp22", "reentrancy_guard"] }\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.em,{children:"./contracts/pair/lib.rs"})," file, add an import statement, and reentrancy_guard as a Storage field:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"...\nuse openbrush::{\n    contracts::{\n        ownable::*,\n        psp22::*,\n        reentrancy_guard,\n    },\n    traits::Storage,\n};\n...\n#[ink(storage)]\n#[derive(Default, Storage)]\npub struct PairContract {\n    #[storage_field]\n    psp22: psp22::Data,\n    #[storage_field]\n    guard: reentrancy_guard::Data,\n    #[storage_field]\n    pair: data::Data,\n}\n...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.em,{children:"./logics/Cargo.toml"})," file, add the ",(0,a.jsx)(n.code,{children:'"reentrancy_guard"'})," feature as an Openbrush dependency:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'openbrush = { git = "https://github.com/727-Ventures/openbrush-contracts", version = "3.0.0", default-features = false, features = ["psp22", "reentrancy_guard"] }\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Modifiers should be added in the impl block on top of the function, as an attribute macro.\nIn the ",(0,a.jsx)(n.em,{children:"./logics/impls/pair/pair.rs"})," file, add ",(0,a.jsx)(n.code,{children:'"reentrancy_guard"'}),", import statements, and modifier on top of ",(0,a.jsx)(n.strong,{children:"mint"}),", ",(0,a.jsx)(n.strong,{children:"burn"})," and ",(0,a.jsx)(n.strong,{children:"swap"})," as well as the ",(0,a.jsx)(n.code,{children:"Storage<reentrancy_guard::Data>"})," trait bound:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"...\nuse openbrush::{\n    contracts::{\n        psp22::*,\n        reentrancy_guard::*,\n        traits::psp22::PSP22Ref,\n    },\n    modifiers,\n    traits::{\n        AccountId,\n        Balance,\n        Storage,\n        Timestamp,\n        ZERO_ADDRESS,\n    },\n};\n...\nimpl<T: Storage<data::Data> + Storage<psp22::Data> + Storage<reentrancy_guard::Data>> Pair for T {\n...\n    #[modifiers(non_reentrant)]\n    fn mint(&mut self, to: AccountId) -> Result<Balance, PairError> {\n...\n    #[modifiers(non_reentrant)]\n    fn burn(&mut self, to: AccountId) -> Result<(Balance, Balance), PairError> {\n...\n    #[modifiers(non_reentrant)]\n    fn swap(\n...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Finally, the ",(0,a.jsx)(n.code,{children:"non_reentrant"})," modifier returns ",(0,a.jsx)(n.code,{children:"ReentrancyGuardError"}),". So let's impl ",(0,a.jsx)(n.code,{children:"From"})," ",(0,a.jsx)(n.code,{children:"ReentrancyGuardError"})," for ",(0,a.jsx)(n.code,{children:"PairError"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use openbrush::{\n    contracts::{\n        reentrancy_guard::*,\n        traits::{\n            psp22::PSP22Error,\n        },\n    },\n    traits::{\n        AccountId,\n        Balance,\n        Timestamp,\n    },\n};\n...\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\npub enum PairError {\n    PSP22Error(PSP22Error),\n    ReentrancyGuardError(ReentrancyGuardError),\n...\nimpl From<ReentrancyGuardError> for PairError {\n    fn from(error: ReentrancyGuardError) -> Self {\n        PairError::ReentrancyGuardError(error)\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"2-only-owner",children:"2. Only Owner"}),"\n",(0,a.jsxs)(n.p,{children:["In ",(0,a.jsx)(n.strong,{children:"initialize"})," there is a guard that ensures the ",(0,a.jsx)(n.a,{href:"https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2Pair.sol#L67",children:"caller is the Factory"}),". We can use the ",(0,a.jsx)(n.a,{href:"https://github.com/Supercolony-net/openbrush-contracts/blob/main/contracts/src/access/ownable/mod.rs",children:"ownable modifier"})," to store the deployer address in storage, and restrict function access to this address only.\nIn the ",(0,a.jsx)(n.em,{children:"./contracts/pair/Cargo.toml"})," file, add the ",(0,a.jsx)(n.code,{children:'"ownable"'})," feature to the Openbrush dependency:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'openbrush = { tag = "v2.3.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ["psp22", "ownable", "reentrancy_guard"] }\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"...\nuse openbrush::{\n    contracts::{\n        ownable::*,\n        psp22::*,\n        reentrancy_guard,\n    },\n    traits::Storage,\n};\n...\n#[ink(storage)]\n#[derive(Default, SpreadAllocate, Storage)]\npub struct PairContract {\n    #[storage_field]\n    psp22: psp22::Data,\n    #[storage_field]\n    ownable: ownable::Data,\n    #[storage_field]\n    guard: reentrancy_guard::Data,\n    #[storage_field]\n    pair: data::Data,\n}\n...\nimpl Pair for PairContract {}\n\nimpl Ownable for PairContract {}\n...\nimpl PairContract {\n    #[ink(constructor)]\n    pub fn new() -> Self {\n        let mut instance = Self::default();\n        let caller = instance.env().caller();\n        instance._init_with_owner(caller);\n        instance.pair.factory = caller;\n        instance\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Update ",(0,a.jsx)(n.code,{children:"Internal"})," Trait to ",(0,a.jsx)(n.code,{children:"psp22::Internal"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"...\n    impl psp22::Internal for PairContract {\n...\n    }\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.em,{children:"./logics/Cargo.toml"})," file, add the ",(0,a.jsx)(n.code,{children:'"ownable"'})," feature to openbrush dependency:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'openbrush = { git = "https://github.com/727-Ventures/openbrush-contracts", version = "3.0.0", default-features = false, features = ["psp22", "ownable", "reentrancy_guard"] }\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Modifiers should be added in the impl block on top of the function, as an attribute macro.\nIn the ",(0,a.jsx)(n.em,{children:"./logics/impls/pair/pair.rs"})," file, add ",(0,a.jsx)(n.code,{children:'"ownable"'}),", the import statements, and modifier on top of ",(0,a.jsx)(n.strong,{children:"initialize"}),", as well as the ",(0,a.jsx)(n.code,{children:"Storage<ownable::Data>"})," trait bound:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"...\nuse openbrush::{\n    contracts::{\n        ownable::*,\n        psp22::*,\n        reentrancy_guard::*,\n        traits::psp22::PSP22Ref,\n    },\n    modifiers,\n    traits::{\n        AccountId,\n        Balance,\n        Storage,\n        Timestamp,\n        ZERO_ADDRESS,\n    },\n};\n...\nimpl<\n    T: Storage<data::Data>\n    + Storage<psp22::Data>\n    + Storage<reentrancy_guard::Data>\n    + Storage<ownable::Data>,\n> Pair for T\n{\n...\n    #[modifiers(only_owner)]\n    fn initialize(&mut self, token_0: AccountId, token_1: AccountId) -> Result<(), PairError> {\n...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Finally, the ",(0,a.jsx)(n.code,{children:"ownable"})," modifier returns ",(0,a.jsx)(n.code,{children:"OwnableError"}),". So let's impl ",(0,a.jsx)(n.code,{children:"From"})," ",(0,a.jsx)(n.code,{children:"OwnableError"})," for ",(0,a.jsx)(n.code,{children:"PairError"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use openbrush::{\n    contracts::{\n        reentrancy_guard::*,\n        traits::{\n            ownable::*,\n            psp22::PSP22Error,\n        },\n    },\n    traits::{\n        AccountId,\n        Balance,\n        Timestamp,\n    },\n};\n...\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\npub enum PairError {\n    PSP22Error(PSP22Error),\n    OwnableError(OwnableError),\n    ReentrancyGuardError(ReentrancyGuardError),\n...\nimpl From<OwnableError> for PairError {\n    fn from(error: OwnableError) -> Self {\n        PairError::OwnableError(error)\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"And that's it!"}),"\n",(0,a.jsxs)(n.p,{children:["By following along with these examples you will have implemented modifiers from Openbrush, and should also be able to implement your own by using information contained in this ",(0,a.jsx)(n.a,{href:"https://medium.com/supercolony/how-to-use-modifiers-for-ink-smart-contracts-using-openbrush-7a9e53ba1c76",children:"tutorial"}),".",(0,a.jsx)(n.br,{}),"\n","Check your Pair contract with (run in contract folder):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:"cargo contract build\n"})}),"\n",(0,a.jsxs)(n.p,{children:["It should now look like this ",(0,a.jsx)(n.a,{href:"https://github.com/AstarNetwork/wasm-tutorial-dex/tree/tutorial/modifiers_end",children:"branch"})]})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>i,a:()=>s});var a=r(67294);const t={},o=a.createContext(t);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);