"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[9786],{73809:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=t(85893),s=t(11151);const r={sidebar_position:10},o="Debug EVM Transactions",a={id:"build/EVM/evm-debug-api",title:"Debug EVM Transactions",description:"Geth's debug APIs and OpenEthereum's trace module provide non-standard RPC methods for getting a deeper insight into transaction processing.",source:"@site/docs/build/EVM/evm-debug-api.md",sourceDirName:"build/EVM",slug:"/build/EVM/evm-debug-api",permalink:"/docs/build/EVM/evm-debug-api",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/EVM/evm-debug-api.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"AstarBase",permalink:"/docs/build/EVM/astarbase"},next:{title:"dApp Staking",permalink:"/docs/build/dapp-staking/"}},d={},c=[{value:"Debugging RPC Methods",id:"debugging-rpc-methods",level:2},{value:"Run a Debugging Node",id:"run-a-debugging-node",level:2},{value:"Using the Debug/Tracing API",id:"using-the-debugtracing-api",level:3},{value:"Using transaction pool API",id:"using-transaction-pool-api",level:3}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"debug-evm-transactions",children:"Debug EVM Transactions"}),"\n",(0,i.jsx)(n.p,{children:"Geth's debug APIs and OpenEthereum's trace module provide non-standard RPC methods for getting a deeper insight into transaction processing."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Thanks to the PureStake team, the Polkadot ecosystem has tracing capabilities similar to that of Geth, and OpenEthereum. Astar Network implements the same approach for Astar EVM tracing, due to it being the best solution we have at the moment, for the Polkadot ecosystem."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"debugging-rpc-methods",children:"Debugging RPC Methods"}),"\n",(0,i.jsx)(n.p,{children:"The following RPC methods are available:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["debug_traceTransaction - requires the hash of the transaction to be traced, optional parameters:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"disableStorage(boolean)"})," - (default: false) setting this to true disables storage capture"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"disableMemory(boolean)"})," - (default: false) setting this to true disables memory capture"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"disableStack(boolean)"})," - (default: false) setting this to true disables stack capture"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://openethereum.github.io/JSONRPC-trace-module#trace_filter",children:"trace_filter"})," - optional parameters:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fromBlock(uint blockNumber)"})," - either block number (hex), earliest which is the genesis block or latest (default) best block available. Trace starting block"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toBlock(uint blockNumber)"})," - either block number (hex), earliest which is the genesis block or latest best block available. Trace ending block"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fromAddress(array addresses)"})," - filter transactions done from these addresses only. If an empty array is provided, no filtering is done with this field"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toAddress(array addresses)"})," - filter transactions done from these addresses only. If an empty array is provided, no filtering is done with this field"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"after(uint offset)"})," - default offset is 0. Trace offset (or starting) number"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"count(uint numberOfTraces)"})," - number of traces to display in a batch"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"There are some default values that you should be aware of:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The maximum number of trace entries a single request of ",(0,i.jsx)(n.code,{children:"trace_filter"})," is allowed to return is ",(0,i.jsx)(n.code,{children:"500"}),". A request exceeding this limit will return an error"]}),"\n",(0,i.jsxs)(n.li,{children:["Blocks processed by requests are temporarily stored in cache for ",(0,i.jsx)(n.code,{children:"300"})," seconds, after which they are deleted."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To change the default values you can add CLI flags when spinning up your tracing node."}),"\n",(0,i.jsx)(n.h2,{id:"run-a-debugging-node",children:"Run a Debugging Node"}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"EVM tracing features available from Astar 5.1 release."})}),"\n",(0,i.jsx)(n.p,{children:"To use the supported RPC methods, you need to run a node in debug mode, which is slightly different than running a full node. Additional flags will also need to be used to tell the node which of the non-standard features to support."}),"\n",(0,i.jsx)(n.p,{children:"Spinning up a debug or tracing node is similar to running a full node. However, there are some additional flags that you may want to enable specific tracing features:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--ethapi=debug"})," - optional flag that enables ",(0,i.jsx)(n.code,{children:"debug_traceTransaction"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--ethapi=trace"})," - optional flag that enables ",(0,i.jsx)(n.code,{children:"trace_filter"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--ethapi=txpool"})," - optional flag that enables ",(0,i.jsx)(n.code,{children:"txpool_content"}),", ",(0,i.jsx)(n.code,{children:"txpool_inspect"}),", ",(0,i.jsx)(n.code,{children:"txpool_status"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--wasm-runtime-overrides=<path/to/overrides>"})," - required flag for tracing that specifies the path where the local Wasm runtimes are stored"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--runtime-cache-size 64"})," - required flag that configures the number of different runtime versions preserved in the in-memory cache to 64"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--ethapi-trace-max-count <uint>"})," - sets the maximum number of trace entries to be returned by the node. ",(0,i.jsx)(n.em,{children:"The default maximum number of trace entries a single request of trace_filter returns is"})," ",(0,i.jsx)(n.strong,{children:"500"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--ethapi-trace-cache-duration <uint>"})," - sets the duration (in seconds) after which the cache of ",(0,i.jsx)(n.code,{children:"trace_filter"}),", for a given block, is discarded. ",(0,i.jsxs)(n.em,{children:["The default amount of time blocks are stored in the cache is ",(0,i.jsx)(n.strong,{children:"300"})," seconds"]})]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["EVM tracing node installation manual available on ",(0,i.jsx)(n.a,{href:"/docs/build/nodes/evm-tracing-node",children:"this page"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"using-the-debugtracing-api",children:"Using the Debug/Tracing API"}),"\n",(0,i.jsx)(n.p,{children:"Once you have a running tracing node, you can open your terminal to run curl commands and start to call any of the available JSON RPC methods."}),"\n",(0,i.jsxs)(n.p,{children:["For example, for the ",(0,i.jsx)(n.code,{children:"debug_traceTransaction"})," method, you can make the following JSON RPC request in your terminal:"]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"--ethapi=debug"})," flag as tracing node argument required to expose this API."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'curl http://127.0.0.1:9944 -H "Content-Type:application/json;charset=utf-8" -d \\\n  \'{\n    "jsonrpc":"2.0",\n    "id":1,\n    "method":"debug_traceTransaction",\n    "params": ["0xc74f3219cf6b9763ee5037bab4aa8ebe5eafe85122b00a64c2ce82912c7d3960"]\n  }\'\n'})}),"\n",(0,i.jsx)(n.p,{children:"The node responds with the step-by-step replayed transaction information."}),"\n",(0,i.jsxs)(n.p,{children:["For the ",(0,i.jsx)(n.code,{children:"trace_filter"})," call, you can make the following JSON RPC request in your terminal (in this case, the filter is from block 20000 to 25000, only for transactions where the recipient is 0x4E0078423a39EfBC1F8B5104540aC2650a756577, it will start with a zero offset and provide the first 20 traces):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'curl http://127.0.0.1:9944 -H "Content-Type:application/json;charset=utf-8" -d   \'{\n    "jsonrpc":"2.0",\n    "id":1,\n    "method":"trace_filter","params":[{"fromBlock":"4142700","toBlock":"4142800","toAddress":["0xb1dD8BABf551cD058F3B253846EB6FA2a5cabc50"],"after":0,"count":20}]\n  }\'\n'})}),"\n",(0,i.jsx)(n.p,{children:"The node responds with the trace information corresponding to the filter."}),"\n",(0,i.jsx)(n.h3,{id:"using-transaction-pool-api",children:"Using transaction pool API"}),"\n",(0,i.jsxs)(n.p,{children:["Let's get pool status using ",(0,i.jsx)(n.code,{children:"curl"})," HTTP POST request."]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"--ethapi=txpool"})," flag as tracing node argument required to expose this API."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'curl http://127.0.0.1:9944 -H "Content-Type:application/json;charset=utf-8" -d \\\n  \'{\n    "jsonrpc":"2.0",\n    "id":1,\n    "method":"txpool_status", "params":[]\n  }\'\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var i=t(67294);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);