"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[9696],{92670:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=t(85893),r=t(11151),i=t(3837);const s={sidebar_position:4},o="Particle Network Smart Wallet-as-a-Service",c={id:"build/zkEVM/integrations/account-abstraction/particle-network",title:"Particle Network Smart Wallet-as-a-Service",description:"Particle Network's Wallet Abstraction services enable universal, Web2-adjacent onboarding and interactions. Its core technology, Smart Wallet-as-a-Service (WaaS) aims to onboard users into MPC-secured smart accounts supporting any chain. It also allows developers to offer an improved user experience through modular, fully customizable EOA/AA embedded wallets. Particle supports its Smart Wallet-as-a-Service through a Modular L1 powering chain abstraction, acting as a settlement layer across chains for a seamless multi-chain experience.",source:"@site/docs/build/zkEVM/integrations/account-abstraction/particle-network.md",sourceDirName:"build/zkEVM/integrations/account-abstraction",slug:"/build/zkEVM/integrations/account-abstraction/particle-network",permalink:"/docs/build/zkEVM/integrations/account-abstraction/particle-network",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/zkEVM/integrations/account-abstraction/particle-network.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Gelato Relay",permalink:"/docs/build/zkEVM/integrations/account-abstraction/relayers/gelato-relay"},next:{title:"Magic.link",permalink:"/docs/build/zkEVM/integrations/account-abstraction/Magic"}},l={},d=[{value:"Create an application",id:"create-an-application",level:2},{value:"Install dependencies",id:"install-dependencies",level:2},{value:"Configure Particle Network",id:"configure-particle-network",level:2},{value:"Example of utilization",id:"example-of-utilization",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"particle-network-smart-wallet-as-a-service",children:"Particle Network Smart Wallet-as-a-Service"}),"\n",(0,a.jsxs)(n.p,{children:["Particle Network's Wallet Abstraction services enable universal, Web2-adjacent onboarding and interactions. Its core technology, ",(0,a.jsx)(n.a,{href:"https://blog.particle.network/announcing-our-smart-wallet-as-a-service-modular-stack-upgrading-waas-with-erc-4337",children:"Smart Wallet-as-a-Service"})," (WaaS) aims to onboard users into MPC-secured smart accounts supporting any chain. It also allows developers to offer an improved user experience through modular, fully customizable EOA/AA embedded wallets. Particle supports its Smart Wallet-as-a-Service through a Modular L1 powering chain abstraction, acting as a settlement layer across chains for a seamless multi-chain experience."]}),"\n",(0,a.jsx)(n.p,{children:"Particle supports Astar zkEVM Testnet through both EOA interactions and native ERC-4337 SimpleAccount implementations."}),"\n",(0,a.jsx)(n.p,{children:"Using Particle Network Wallet-as-a-Service for a secure, flexible embedded wallet implementation on Astar is quite simple."}),"\n",(0,a.jsx)(n.h2,{id:"create-an-application",children:"Create an application"}),"\n",(0,a.jsxs)(n.p,{children:["To use Particle Network's Smart Wallet-as-a-Service on Astar, you'll need to begin by creating an account on the ",(0,a.jsx)(n.a,{href:"https://dashboard.particle.network",children:"Particle Network dashboard"})," and spinning up an application."]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Navigate to the Particle Network dashboard, then sign up or log in"}),"\n"]}),"\n",(0,a.jsx)(i.Z,{caption:"Dashboard login",src:t(52145).Z,width:"100%"}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Once logged in, create a new project\n",(0,a.jsx)(n.img,{src:"https://files.readme.io/e7f1946-image_23_1.png",alt:"Project creation"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Once logged in, create a new project."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.Z,{caption:"Project creation",src:t(6175).Z,width:"100%"}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"Enter the new project and create a new application"}),"\n"]}),"\n",(0,a.jsx)(i.Z,{caption:"Application creation",src:t(52145).Z,width:"100%"}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsx)(n.li,{children:"Finally, copy the project ID, client key, and app ID"}),"\n"]}),"\n",(0,a.jsx)(i.Z,{caption:"Application dashboard",src:t(90460).Z,width:"100%"}),"\n",(0,a.jsx)(n.h2,{id:"install-dependencies",children:"Install dependencies"}),"\n",(0,a.jsx)(n.p,{children:"To integrate Particle Network within your Astar application, you'll need to install a number of dependencies- the specifics of which depend on whether you intend on purely using the default EOA generated by Particle's Wallet-as-a-Service, or if you intend to leverage an attached smart account."}),"\n",(0,a.jsxs)(n.p,{children:["For both EOA & smart account utilization, install ",(0,a.jsx)(n.code,{children:"@particle-network/auth"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install @particle-network/auth\n\n// OR\n\nyarn add @particle-network/auth\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you'd like to natively use ERC-4337 account abstraction, also install ",(0,a.jsx)(n.code,{children:"@particle-network/aa"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install @particle-network/aa\n\n// OR\n\nyarn add @particle-network/aa\n"})}),"\n",(0,a.jsx)(n.h2,{id:"configure-particle-network",children:"Configure Particle Network"}),"\n",(0,a.jsxs)(n.p,{children:["With an application made and dependencies installed, you can move on to configuring ",(0,a.jsx)(n.code,{children:"ParticleNetwork"})," from ",(0,a.jsx)(n.code,{children:"@particle-network/auth"}),", and if applicable, ",(0,a.jsx)(n.code,{children:"SmartAccount"})," from ",(0,a.jsx)(n.code,{children:"@particle-network/aa"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { ParticleNetwork } from '@particle-network/auth';\nimport { AstarzkEVMTestnet } from '@particle-network/chains';\nimport { SmartAccount } from '@particle-network/aa';\n\n// Project ID, client key, and app ID from https://dashboard.particle.network\nconst config = {\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  clientKey: process.env.REACT_APP_CLIENT_KEY,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nconst particle = new ParticleNetwork({\n  ...config,\n  chainName: AstarzkEVMTestnet.name,\n  chainId: AstarzkEVMTestnet.id,\n  wallet: { displayWalletEntry: true }\n});\n\n// If using AA\nconst smartAccount = new SmartAccount(new ParticleProvider(particle.auth), {\n  ...config,\n  aaOptions: {\n    simple: [{ chainId: AstarzkEVMTestnet.id, version: '1.0.0' }]\n  }\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["At this point, you've signed up to the Particle dashboard and created an application, installed all required dependencies, and configured ",(0,a.jsx)(n.code,{children:"ParticleNetwork"}),", along with ",(0,a.jsx)(n.code,{children:"SmartAccount"})," if applicable."]}),"\n",(0,a.jsx)(n.h2,{id:"example-of-utilization",children:"Example of utilization"}),"\n",(0,a.jsx)(n.p,{children:"With the aforementioned established, Particle Network can be used similarly to as is shown in the example application below."}),"\n",(0,a.jsx)(n.p,{children:'Specifically, this application creates a smart account (of type "SimpleAccount") on Astar zkEVM Testnet through social login, then uses it to send a test transaction of 0.001 ASTR.'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import React, { useState, useEffect } from 'react';\nimport { ParticleNetwork } from '@particle-network/auth';\nimport { ParticleProvider } from '@particle-network/provider';\nimport { AstarzkEVMTestnet } from '@particle-network/chains';\nimport { AAWrapProvider, SmartAccount } from '@particle-network/aa';\nimport { ethers } from 'ethers';\n\nconst config = {\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  clientKey: process.env.REACT_APP_CLIENT_KEY,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nconst particle = new ParticleNetwork({\n  ...config,\n  chainName: AstarzkEVMTestnet.name,\n  chainId: AstarzkEVMTestnet.id,\n  wallet: { displayWalletEntry: true }\n});\n\nconst smartAccount = new SmartAccount(new ParticleProvider(particle.auth), {\n  ...config,\n  aaOptions: {\n    simple: [{ chainId: AstarzkEVMTestnet.id, version: '1.0.0' }]\n  }\n});\n\nconst customProvider = new ethers.providers.Web3Provider(new AAWrapProvider(smartAccount), \"any\");\n\nparticle.setERC4337({\n  name: 'SIMPLE',\n  version: '1.0.0'\n});\n\nconst App = () => {\n  const [userInfo, setUserInfo] = useState(null);\n  const [balance, setBalance] = useState(null);\n\n  useEffect(() => {\n    if (userInfo) {\n      fetchBalance();\n    }\n  }, [userInfo]);\n\n  const fetchBalance = async () => {\n    const address = await smartAccount.getAddress();\n    const balance = await customProvider.getBalance(address);\n    setBalance(ethers.utils.formatEther(balance));\n  };\n\n  const handleLogin = async (preferredAuthType) => {\n    const user = !particle.auth.isLogin() ? await particle.auth.login({preferredAuthType}) : particle.auth.getUserInfo();\n    setUserInfo(user);\n  }\n\n  const executeUserOp = async () => {\n    const signer = customProvider.getSigner();\n    const tx = {\n      to: \"0x000000000000000000000000000000000000dEaD\",\n      value: ethers.utils.parseEther(\"0.001\"),\n    };\n    const txResponse = await signer.sendTransaction(tx);\n    const txReceipt = await txResponse.wait();\n    console.log('Transaction hash:', txReceipt.transactionHash);\n  };\n\n  return (\n    <div className=\"App\">\n      {!userInfo ? (\n        <div>\n          <button onClick={() => handleLogin('google')}>Sign in with Google</button>\n          <button onClick={() => handleLogin('twitter')}>Sign in with Twitter</button>\n        </div>\n      ) : (\n        <div>\n          <h2>{userInfo.name}</h2>\n          <div>\n            <small>{balance} ASTR</small>\n            <button onClick={executeUserOp}>Execute User Operation</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},3837:(e,n,t)=>{t.d(n,{Z:()=>r});t(67294);var a=t(85893);function r(e){let{src:n,caption:t,width:r="460px"}=e;return(0,a.jsxs)("center",{children:[(0,a.jsx)("br",{}),(0,a.jsxs)("figure",{children:[(0,a.jsx)("img",{src:n,alt:t,width:r}),(0,a.jsx)("figcaption",{children:t})]}),(0,a.jsx)("br",{})]})}},52145:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/22_1-611249328e65e83e409e81bc2d9257e9.png"},6175:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/23_1-72eb1a07e94fa2e023672bc1f3cd2f31.png"},90460:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/24_1-40ba5c8dcfe80b3c01d09df34459664a.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var a=t(67294);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);