"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[963],{96051:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(85893),r=t(11151);const i={},s="Custom Trait",o={id:"build/wasm/from-zero-to-ink-hero/nft/CustomTrait/customtrait",title:"Custom Trait",description:"Next, we will expand the contract with more utility methods to have more control over the NFT creation, minting, payments and all that most of the NFT projects will need.",source:"@site/docs/build/wasm/from-zero-to-ink-hero/nft/CustomTrait/customtrait.md",sourceDirName:"build/wasm/from-zero-to-ink-hero/nft/CustomTrait",slug:"/build/wasm/from-zero-to-ink-hero/nft/CustomTrait/",permalink:"/docs/build/wasm/from-zero-to-ink-hero/nft/CustomTrait/",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/wasm/from-zero-to-ink-hero/nft/CustomTrait/customtrait.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Override mint() Method",permalink:"/docs/build/wasm/from-zero-to-ink-hero/nft/Override/"},next:{title:"PayableMint Trait",permalink:"/docs/build/wasm/from-zero-to-ink-hero/nft/PayableMintTrait/"}},l={},c=[{value:"Folder Structure for Custom Trait",id:"folder-structure-for-custom-trait",level:2},{value:"Module Linking",id:"module-linking",level:2},{value:"Define Custom Trait",id:"define-custom-trait",level:2},{value:"Move <code>mint()</code> Function to Custom Trait Implementation",id:"move-mint-function-to-custom-trait-implementation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"custom-trait",children:"Custom Trait"}),"\n",(0,a.jsxs)(n.p,{children:["Next, we will expand the contract with more utility methods to have more control over the NFT creation, minting, payments and all that most of the NFT projects will need.\nTo start with we will move ",(0,a.jsx)(n.code,{children:"mint()"})," from contract ",(0,a.jsx)(n.code,{children:"lib.rs"})," to a custom trait ",(0,a.jsx)(n.code,{children:"PayableMint"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"folder-structure-for-custom-trait",children:"Folder Structure for Custom Trait"}),"\n",(0,a.jsxs)(n.p,{children:["Before starting to add code we need to prepare the scene for the external trait. Create new ",(0,a.jsx)(n.code,{children:"logics"})," folder with following empty files:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 contracts\n\u2502\xa0\xa0 \u2514\u2500\u2500 shiden34\n\u2502\xa0\xa0     \u251c\u2500\u2500 Cargo.toml\n\u2502\xa0\xa0     \u2514\u2500\u2500 lib.rs\n\u2514\u2500\u2500 logics\n    \u251c\u2500\u2500 Cargo.toml\n    \u251c\u2500\u2500 impls\n    \u2502\xa0\xa0 \u251c\u2500\u2500 mod.rs\n    \u2502\xa0\xa0 \u2514\u2500\u2500 payable_mint\n    \u2502\xa0\xa0     \u251c\u2500\u2500 mod.rs\n    \u2502\xa0\xa0     \u2514\u2500\u2500 payable_mint.rs\n    \u251c\u2500\u2500 lib.rs\n    \u2514\u2500\u2500 traits\n        \u251c\u2500\u2500 mod.rs\n        \u2514\u2500\u2500 payable_mint.rs\n"})}),"\n",(0,a.jsx)(n.h2,{id:"module-linking",children:"Module Linking"}),"\n",(0,a.jsxs)(n.p,{children:["With the extended structure we need to link all new modules. Let's start from ",(0,a.jsx)(n.code,{children:"logics"})," folder.\nThe crate's ",(0,a.jsx)(n.code,{children:"lib.rs"})," needs to point to ",(0,a.jsx)(n.code,{children:"impls"})," and ",(0,a.jsx)(n.code,{children:"trait"})," folders and since it is top module for this crate it needs a few macros:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std)]\n\npub mod impls;\npub mod traits;\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The crate's ",(0,a.jsx)(n.code,{children:"Cargo.toml"})," will import all ink! and Openbrush crates and it will be used by the contract's ",(0,a.jsx)(n.code,{children:"Cargo.toml"})," to import all methods. We will name this package ",(0,a.jsx)(n.code,{children:"payable_mint_pkg"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'[package]\nname = "payable_mint_pkg"\nversion = "3.1.0"\nauthors = ["Astar builder"]\nedition = "2021"\n\n[dependencies]\nink = { version = "4.2.1", default-features = false }\nscale = { package = "parity-scale-codec", version = "3", default-features = false, features = ["derive"] }\nscale-info = { version = "2.6", default-features = false, features = ["derive"], optional = true }\nopenbrush = { tag = "v4.0.0-beta", git = "https://github.com/Brushfam/openbrush-contracts", default-features = false, features = ["psp34", "ownable"] }\n\n[lib]\npath = "lib.rs"\ncrate-type = ["rlib"]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink/std",\n    "scale/std",\n    "scale-info",\n    "openbrush/std",\n]\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Add same ",(0,a.jsx)(n.code,{children:"mod.rs"})," file in folders: traits, impls, and impls/payable_mint."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"pub mod payable_mint;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["As a last step add link to ",(0,a.jsx)(n.code,{children:"payable_mint"})," in contract's ",(0,a.jsx)(n.code,{children:"Cargo.toml"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'payable_mint_pkg = { path = "../../logics", default-features = false }\n\n[features]\ndefault = ["std"]\nstd = [\n    // ...\n    "payable_mint_pkg/std",\n]\n'})}),"\n",(0,a.jsx)(n.h2,{id:"define-custom-trait",children:"Define Custom Trait"}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.code,{children:"logics/traits/payable_mint.rs"})," file, add a trait_definition for PayableMint."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"use openbrush::{\n    contracts::{\n        psp34::PSP34Error,\n        psp34::extensions::enumerable::*\n    },\n    traits::{\n        AccountId,\n    },\n};\n\n#[openbrush::wrapper]\npub type PayableMintRef = dyn PayableMint;\n\n#[openbrush::trait_definition]\npub trait PayableMint {\n    #[ink(message, payable)]\n    fn mint(&mut self, account: AccountId, id: Id) -> Result<(), PSP34Error>;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"You may have noticed some unusual macro commands in these examples. They will be explained in greater detail in the next section as we go over the process of building a DEX."}),"\n",(0,a.jsxs)(n.h2,{id:"move-mint-function-to-custom-trait-implementation",children:["Move ",(0,a.jsx)(n.code,{children:"mint()"})," Function to Custom Trait Implementation"]}),"\n",(0,a.jsxs)(n.p,{children:["Let's move the ",(0,a.jsx)(n.code,{children:"mint()"})," function from the contract's ",(0,a.jsx)(n.code,{children:"lib.rs"})," to the newly created ",(0,a.jsx)(n.code,{children:"logics/impls/payable_mint.rs"})," file, as we do not want any duplicated calls in the contract."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use openbrush::traits::DefaultEnv;\nuse openbrush::{\n    contracts::psp34::*,\n    traits::{AccountId, String},\n};\n\n#[openbrush::trait_definition]\npub trait PayableMintImpl: psp34::InternalImpl {\n    #[ink(message, payable)]\n    fn mint(&mut self, account: AccountId, id: Id) -> Result<(), PSP34Error> {\n        if Self::env().transferred_value() != 1_000_000_000_000_000_000 {\n            return Err(PSP34Error::Custom(String::from("BadMintValue")));\n        }\n\n        psp34::InternalImpl::_mint_to(self, account, id)\n    }\n}\n\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The last remaining step is to import and implement ",(0,a.jsx)(n.code,{children:"PayableMint"})," in our contract:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"use payable_mint_pkg::impls::payable_mint::*;\n\n...\n\nimpl payable_mint::PayableMintImpl for Shiden34 {}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The contract with all its changes should now appear as something like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::implementation(PSP34, PSP34Enumerable, PSP34Metadata, PSP34Mintable, Ownable)]\n#[openbrush::contract]\npub mod shiden34 {\n    use openbrush::traits::Storage;\n    use payable_mint_pkg::impls::payable_mint::*;\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct Shiden34 {\n        #[storage_field]\n        psp34: psp34::Data,\n        #[storage_field]\n        ownable: ownable::Data,\n        #[storage_field]\n        metadata: metadata::Data,\n        #[storage_field]\n        enumerable: enumerable::Data,\n    }\n\n    #[overrider(PSP34Mintable)]\n    #[openbrush::modifiers(only_owner)]\n    fn mint(&mut self, account: AccountId, id: Id) -> Result<(), PSP34Error> {\n        psp34::InternalImpl::_mint_to(self, account, id)\n    }\n\n   impl payable_mint::PayableMintImpl for Shiden34 {}\n\n    impl Shiden34 {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            let mut _instance = Self::default();\n            ownable::Internal::_init_with_owner(&mut _instance, Self::env().caller());\n            psp34::Internal::_mint_to(&mut _instance, Self::env().caller(), Id::U8(1))\n                .expect("Can mint");\n            let collection_id = psp34::PSP34Impl::collection_id(&_instance);\n            metadata::Internal::_set_attribute(\n                &mut _instance,\n                collection_id.clone(),\n                String::from("name"),\n                String::from("Shiden34"),\n            );\n            metadata::Internal::_set_attribute(\n                &mut _instance,\n                collection_id,\n                String::from("symbol"),\n                String::from("SH34"),\n            );\n            _instance\n        }\n    }\n}\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"Format your code with:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo fmt --all\n"})}),"\n",(0,a.jsx)(n.p,{children:"Check if code compiles:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo check\n"})}),"\n",(0,a.jsxs)(n.p,{children:["At this stage, your code should look something like ",(0,a.jsx)(n.a,{href:"https://github.com/swanky-dapps/nft/tree/tutorial/trait-step3",children:"this"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var a=t(67294);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);