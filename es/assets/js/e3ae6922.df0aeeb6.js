"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[8143],{89522:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>l});var a=s(85893),r=s(11151);const t={title:"Raspberry Pi Node",sidebar_position:8},i="Raspberry Pi configuration for Astar node",o={id:"build/nodes/rpi-cheat-sheet",title:"Raspberry Pi Node",description:"This is a simple readme containing main steps to setup a Raspberry Pi running an Astar node.",source:"@site/docs/build/nodes/rpi-cheat-sheet.md",sourceDirName:"build/nodes",slug:"/build/nodes/rpi-cheat-sheet",permalink:"/es/docs/build/nodes/rpi-cheat-sheet",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/nodes/rpi-cheat-sheet.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Raspberry Pi Node",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Run an EVM Tracing Node",permalink:"/es/docs/build/nodes/evm-tracing-node"},next:{title:"Build on Astar zkEVM",permalink:"/es/docs/build/zkEVM/"}},d={},l=[{value:"Setup Raspberry Pi to boot from USB disk",id:"setup-raspberry-pi-to-boot-from-usb-disk",level:2},{value:"Install OS",id:"install-os",level:2},{value:"Configure the Raspberry Pi",id:"configure-the-raspberry-pi",level:2},{value:"Install Astar node",id:"install-astar-node",level:2},{value:"Extra",id:"extra",level:2},{value:"Polkadot node management",id:"polkadot-node-management",level:3},{value:"Database location",id:"database-location",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"raspberry-pi-configuration-for-astar-node",children:"Raspberry Pi configuration for Astar node"}),"\n",(0,a.jsx)(n.p,{children:"This is a simple readme containing main steps to setup a Raspberry Pi running an Astar node."}),"\n",(0,a.jsx)(n.p,{children:"Requirements:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Raspberry Pi 4 with 2 Gb RAM minimum, recomended 4 Gb"}),"\n",(0,a.jsx)(n.li,{children:"A USD hard drive (preferably SSD) of 1 Tb"}),"\n",(0,a.jsx)(n.li,{children:"Internet connection (Wifi is fine)"}),"\n",(0,a.jsx)(n.li,{children:"A SD Card"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"setup-raspberry-pi-to-boot-from-usb-disk",children:"Setup Raspberry Pi to boot from USB disk"}),"\n",(0,a.jsx)(n.p,{children:"Raspberry Pi natively loads OS from MicroSD card.\nAs we need a hard drive to store the blockchain database, we start by configuring the Raspberry to boot OS from USB disk."}),"\n",(0,a.jsxs)(n.p,{children:["Download Raspberry Pi Imager: ",(0,a.jsx)(n.a,{href:"https://www.raspberrypi.com/software/",children:"https://www.raspberrypi.com/software/"})]}),"\n",(0,a.jsx)(n.p,{children:"Insert the SD card"}),"\n",(0,a.jsx)(n.p,{children:"Start RPi imager"}),"\n",(0,a.jsx)(n.p,{children:"Choose OS > Misc Utility Images > Bootloader > USB Boot"}),"\n",(0,a.jsx)(n.p,{children:"Choose storage > select the SD card"}),"\n",(0,a.jsx)(n.p,{children:"Write"}),"\n",(0,a.jsx)(n.p,{children:"Insert the SD card into the Raspberry Pi"}),"\n",(0,a.jsx)(n.p,{children:"Plug the Pi and wait for 10-20 seconds after the green light blinks constantly"}),"\n",(0,a.jsx)(n.p,{children:"Turn off the Pi and remove the SD card"}),"\n",(0,a.jsx)(n.h2,{id:"install-os",children:"Install OS"}),"\n",(0,a.jsx)(n.p,{children:"Plug the USD hard drive"}),"\n",(0,a.jsx)(n.p,{children:"Start RPi imager"}),"\n",(0,a.jsx)(n.p,{children:"Choose OS > Other general-purpose OS > Ubuntu > Ubuntu Server 22.04.2 LTS (64-bit)"}),"\n",(0,a.jsx)(n.p,{children:"Choose storage > select the USB disk"}),"\n",(0,a.jsxs)(n.p,{children:["If advance menu doesn't show up, open it with ",(0,a.jsx)(n.code,{children:"Ctrl + Shift + X"})]}),"\n",(0,a.jsx)(n.p,{children:"Set hostname, enable SSH, user and wireless LAN"}),"\n",(0,a.jsx)(n.p,{children:"Write"}),"\n",(0,a.jsx)(n.p,{children:"Plug the USB drive on the Pi and turn it on"}),"\n",(0,a.jsx)(n.h2,{id:"configure-the-raspberry-pi",children:"Configure the Raspberry Pi"}),"\n",(0,a.jsx)(n.p,{children:"SSH to the Pi from your computer"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["On Linux/Mac: ",(0,a.jsx)(n.code,{children:"ssh user@pi_name.local"})]}),"\n",(0,a.jsx)(n.li,{children:"On Windows, you will need a SSH client like PuTTY"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Check that partition ",(0,a.jsx)(n.code,{children:"/"})," uses the full size of the disk: ",(0,a.jsx)(n.code,{children:"lsblk"})]}),"\n",(0,a.jsxs)(n.p,{children:["Update and upgrade the OS with latest packages: ",(0,a.jsx)(n.code,{children:"sudo apt update && sudo apt upgrade"})]}),"\n",(0,a.jsxs)(n.p,{children:["Install package required: ",(0,a.jsx)(n.code,{children:"sudo apt install -y adduser libfontconfig1"})]}),"\n",(0,a.jsx)(n.p,{children:"To prevent Out Of Memory issues, create a swap file"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo fallocate -l 4g /file.swap\nsudo chmod 600 /file.swap\nsudo mkswap /file.swap\nsudo swapon /file.swap\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Add swap file to fstab so that swap will be loaded on reboot: ",(0,a.jsx)(n.code,{children:"echo '/file.swap none swap sw 0 0' | sudo tee -a /etc/fstab"})]}),"\n",(0,a.jsx)(n.h2,{id:"install-astar-node",children:"Install Astar node"}),"\n",(0,a.jsxs)(n.p,{children:["Get the ",(0,a.jsx)(n.code,{children:"aarch64"})," binary link from Astar release page: ",(0,a.jsx)(n.a,{href:"https://github.com/AstarNetwork/Astar/releases",children:"https://github.com/AstarNetwork/Astar/releases"})]}),"\n",(0,a.jsx)(n.p,{children:"Download and unarchive ARM binary (example here with v5.21.0)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"wget https://github.com/AstarNetwork/Astar/releases/download/v5.21.0/astar-collator-v5.21.0-ubuntu-aarch64.tar.gz && tar -xf astar-collator*.tar.gz\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create a dedicated user for the node and move the node binary:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo useradd --no-create-home --shell /usr/sbin/nologin astar\nsudo mv ./astar-collator /usr/local/bin\nsudo chmod +x /usr/local/bin/astar-collator\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create a dedicated directory for the chain storage data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo mkdir /var/lib/astar && sudo chown astar:astar /var/lib/astar\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create the Astar service file changing the name {NODE_NAME}"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/systemd/system/astar.service\n\n    [Unit]\n    Description=Astar Archive node\n\n    [Service]\n    User=astar\n    Group=astar\n    \n    ExecStart=/usr/local/bin/astar-collator \\\n    --state-pruning archive \\\n    --blocks-pruning archive \\\n    --name {NODE_NAME} \\\n    --chain astar \\\n    --base-path /var/lib/astar \\\n    --telemetry-url 'wss://telemetry.polkadot.io/submit/ 0' \\\n    -- \\\n    --state-pruning 100 \\\n    --blocks-pruning 100\n\n    Restart=always\n    RestartSec=10\n\n    [Install]\n    WantedBy=multi-user.target\n"})}),"\n",(0,a.jsx)(n.p,{children:"Save the file: Ctrl+O > Yes"}),"\n",(0,a.jsxs)(n.p,{children:["Start the service: ",(0,a.jsx)(n.code,{children:"sudo systemctl start astar.service"})]}),"\n",(0,a.jsxs)(n.p,{children:["Check the node log to ensure proper syncing: ",(0,a.jsx)(n.code,{children:"journalctl -f -u astar.service -n100"})]}),"\n",(0,a.jsxs)(n.p,{children:["Enable the service: ",(0,a.jsx)(n.code,{children:"sudo systemctl enable astar.service"})]}),"\n",(0,a.jsx)(n.h2,{id:"extra",children:"Extra"}),"\n",(0,a.jsx)(n.h3,{id:"polkadot-node-management",children:"Polkadot node management"}),"\n",(0,a.jsx)(n.p,{children:"The Astar client embeeds an Astar node and a Polkadot node."}),"\n",(0,a.jsxs)(n.p,{children:["To pass commands to the Polkadot node, you need to add ",(0,a.jsx)(n.code,{children:"--"})," in between, just like we did in the service file above where we are passing a different pruning mode for the Polkadot node (this node doesn't need to be an archive as we only use its current state) and a warp sync mode (only possible on a full node, doesn't apply to an archive node)."]}),"\n",(0,a.jsx)(n.h3,{id:"database-location",children:"Database location"}),"\n",(0,a.jsx)(n.p,{children:"In case you want to change the database mode, you need to stop the node, delete the database, then restart the node."}),"\n",(0,a.jsxs)(n.p,{children:["Astar db is located in ",(0,a.jsx)(n.code,{children:"/var/lib/astar/chains/astar/db"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Polkadot db is located in ",(0,a.jsx)(n.code,{children:"/var/lib/astar/polkadot/chains/polkadot/db"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Example: delete the Polkadot db after stopping the node:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo rm -rf /var/lib/astar/polkadot/chains/polkadot/db\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>i});var a=s(67294);const r={},t=a.createContext(r);function i(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);