"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[9265],{12815:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(85893),i=t(11151);const a={sidebar_position:2},o="ManicMinter Setup",s={id:"build/wasm/from-zero-to-ink-hero/manic-minter/manic-setup",title:"ManicMinter Setup",description:"This is a tutorial on creating a minter contract and a token contract using the ink! smart contract framework. In this tutorial, you will learn how to develop two contracts, use cross contract call and test it with ink! e2e framework.",source:"@site/docs/build/wasm/from-zero-to-ink-hero/manic-minter/manic-setup.md",sourceDirName:"build/wasm/from-zero-to-ink-hero/manic-minter",slug:"/build/wasm/from-zero-to-ink-hero/manic-minter/manic-setup",permalink:"/es/docs/build/wasm/from-zero-to-ink-hero/manic-minter/manic-setup",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/wasm/from-zero-to-ink-hero/manic-minter/manic-setup.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Prerequisites",permalink:"/es/docs/build/wasm/from-zero-to-ink-hero/manic-minter/"},next:{title:"ManicMinter Contract",permalink:"/es/docs/build/wasm/from-zero-to-ink-hero/manic-minter/manic-contract"}},c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"ManicMinter and Oxygen Smart Contracts",id:"manicminter-and-oxygen-smart-contracts",level:2},{value:"Initial Setup",id:"initial-setup",level:3},{value:"Oxygen Contract Setup",id:"oxygen-contract-setup",level:3},{value:"ManicMinter Contract Setup",id:"manicminter-contract-setup",level:3},{value:"Verify the Contracts",id:"verify-the-contracts",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"manicminter-setup",children:"ManicMinter Setup"}),"\n",(0,r.jsx)(n.p,{children:"This is a tutorial on creating a minter contract and a token contract using the ink! smart contract framework. In this tutorial, you will learn how to develop two contracts, use cross contract call and test it with ink! e2e framework."}),"\n",(0,r.jsx)(n.p,{children:'The minter contract will handle the minting of new fungible tokens, while the token contract will adhere to the PSP22 standard. Our chosen name for the fungible token smart contract is "Oxygen," and the minter contract will be called "ManicMinter."'}),"\n",(0,r.jsx)(n.p,{children:"Once the contracts are created, the ManicMinter contract will become the owner of the Oxygen contract. Only the ManicMinter contract will have the ability to mint Oxygen tokens, and users will acquire these tokens by paying native tokens to the ManicMinter contract at a price determined by its owner."}),"\n",(0,r.jsx)(n.p,{children:"Let's help Willy to mint some Oxygen tokens through the ManicMinter contract!"}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.p,{children:["Please refer to the ",(0,r.jsx)(n.a,{href:"/es/docs/build/wasm/from-zero-to-ink-hero/manic-minter/",children:"previous section"})," for the list of prerequisites."]}),"\n",(0,r.jsx)(n.h2,{id:"manicminter-and-oxygen-smart-contracts",children:"ManicMinter and Oxygen Smart Contracts"}),"\n",(0,r.jsx)(n.h3,{id:"initial-setup",children:"Initial Setup"}),"\n",(0,r.jsx)(n.p,{children:"In a new project folder, execute the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ cargo contract new manicminter\n$ cargo contract new oxygen\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create the root ",(0,r.jsx)(n.code,{children:"Cargo.toml"})," file with the workspace content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[workspace]\nmembers = [\n    "oxygen",\n    "manicminter",\n]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"oxygen-contract-setup",children:"Oxygen Contract Setup"}),"\n",(0,r.jsxs)(n.p,{children:["Let's create a new ink! smart contract for fungible tokens using Brushfam library for PSP22. In the ",(0,r.jsx)(n.code,{children:"oxygen/"})," folder, add the following to the ",(0,r.jsx)(n.code,{children:"Cargo.toml"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[package]\nname = "oxygen"\nversion = "1.0.0"\nedition = "2021"\nauthors = ["The best developer ever"]\n\n[dependencies]\n\nink = { version = "4.1.0", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "3", default-features = false, features = ["derive"] }\nscale-info = { version = "2.3", default-features = false, features = ["derive"], optional = true }\n\n# Include brush as a dependency and enable default implementation for PSP22 via brush feature\nopenbrush = { tag = "3.1.0", git = "https://github.com/727-Ventures/openbrush-contracts", default-features = false, features = ["psp22", "ownable"] }\n\n[lib]\npath = "lib.rs"\ncrate-type = [\n    "rlib",\n]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink/std",\n    "scale/std",\n    "scale-info/std",\n\n    "openbrush/std",\n]\nink-as-dependency = [] \n'})}),"\n",(0,r.jsxs)(n.p,{children:["In the same ",(0,r.jsx)(n.code,{children:"oxygen/"})," folder, add the following to the ",(0,r.jsx)(n.code,{children:"lib.rs"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n\npub use self::oxygen::OxygenRef;\n\n#[openbrush::contract]\npub mod oxygen {\n\n    use openbrush::contracts::ownable::*;\n    use openbrush::contracts::psp22::extensions::mintable::*;\n    use openbrush::traits::Storage;\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct Oxygen {\n        #[storage_field]\n        psp22: psp22::Data,\n        #[storage_field]\n        ownable: ownable::Data,\n    }\n\n    impl PSP22 for Oxygen {}\n    impl Ownable for Oxygen {}\n    impl PSP22Mintable for Oxygen {}\n\n    impl Oxygen {\n        #[ink(constructor)]\n        pub fn new(initial_supply: Balance) -> Self {\n            let mut instance = Self::default();\n            instance\n                ._mint_to(instance.env().caller(), initial_supply)\n                .expect("Should mint");\n            instance._init_with_owner(instance.env().caller());\n            instance\n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This tutorial uses ink! version 4.1.0. If you are using a different version, please update the ",(0,r.jsx)(n.code,{children:"Cargo.toml"})," file accordingly."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'ink = { version = "4.1.0", default-features = false }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Use Openbrush version ",(0,r.jsx)(n.code,{children:"3.1.0"}),' with ink! version 4.1.0 and add features "psp22" and  "ownable".']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'openbrush = { tag = "3.1.0", git = "https://github.com/727-Ventures/openbrush-contracts", default-features = false, features = ["psp22", "ownable"] }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Since Openbrush 3.1.0 uses feature ",(0,r.jsx)(n.code,{children:"min_specialization"})," which is not supported by Rust stable, we need to use nightly Rust compiler. Create a file ",(0,r.jsx)(n.code,{children:"rust-toolchain.toml"})," in the root of the project with the following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[toolchain]\nchannel = "nightly-2023-01-10"\ncomponents = [ "rustfmt", "clippy" ]\ntargets = [ "wasm32-unknown-unknown"]\nprofile = "minimal"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"manicminter-contract-setup",children:"ManicMinter Contract Setup"}),"\n",(0,r.jsxs)(n.p,{children:["This tutorial uses ink! version 4.1.0. If you are using a different version, please update the ",(0,r.jsx)(n.code,{children:"Cargo.toml"})," file accordingly."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nink = { version = "4.1.0", default-features = false }\n[dev-dependencies]\nink_e2e = "4.1.0"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"verify-the-contracts",children:"Verify the Contracts"}),"\n",(0,r.jsx)(n.p,{children:"The ManicMinter contract for now contains the boilerplate code. In the next step we will add the ManicMinter contract code, but for now let's just verify that our setup configuration is correct.\nLet's verify the setup so far by building the contracts. At the root of the project, execute the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cargo check\ncargo test\n"})}),"\n",(0,r.jsx)(n.p,{children:"The folder structure for your contract should now look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"Cargo.lock\nCargo.toml\nmanicminter/\noxygen/\nrust-toolchain.toml\ntarget/\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The full code for this example is available ",(0,r.jsx)(n.a,{href:"https://github.com/swanky-dapps/manic-minter",children:"here"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var r=t(67294);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);