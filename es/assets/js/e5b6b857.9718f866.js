"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[4990],{24276:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=t(85893),s=t(11151);const o={sidebar_position:9},r="Contratos inteligentes",i={id:"learn/smart-contracts",title:"Contratos inteligentes",description:"Vista general",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/learn/smart-contracts.md",sourceDirName:"learn",slug:"/learn/smart-contracts",permalink:"/es/docs/learn/smart-contracts",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/learn/smart-contracts.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Cuentas Proxy",permalink:"/es/docs/learn/Proxies"},next:{title:"Tokenomics 2.0",permalink:"/es/docs/learn/tokenomics2/"}},l={},d=[{value:"Vista general",id:"vista-general",level:2},{value:"Contratos inteligentes de WebAssembly",id:"contratos-inteligentes-de-webassembly",level:2},{value:"Contratos inteligentes de m\xe1quina virtual de Ethereum",id:"contratos-inteligentes-de-m\xe1quina-virtual-de-ethereum",level:2},{value:"Aprende m\xe1s",id:"aprende-m\xe1s",level:2}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"contratos-inteligentes",children:"Contratos inteligentes"}),"\n",(0,n.jsx)(a.h2,{id:"vista-general",children:"Vista general"}),"\n",(0,n.jsx)(a.p,{children:"Astar es una plataforma para el despliegue de contratos inteligentes.  Los desarrolladores pueden crear y desplegar contratos inteligentes en Astar Network usando una variedad de lenguajes de programaci\xf3n, incluyendo Solidity, que es compatible con contratos inteligentes Ethereum o ink! un lenguaje de contrato inteligente basado en Rust para el ecosistema de Polkadot. Esta compatibilidad garantiza una transici\xf3n fluida para los desarrolladores de otros ecosistemas de blockchain, fomentando la interoperabilidad y favoreciendo la adopci\xf3n de Astar Network."}),"\n",(0,n.jsx)(a.p,{children:"Astar Network emplea un mecanismo de consenso de alto rendimiento que garantiza la ejecuci\xf3n r\xe1pida y eficiente de los contratos. La red utiliza una combinaci\xf3n \xfanica de algoritmos de consenso proof-of-stake (PoS) y proof-of-work (PoW), que mejoran la seguridad al tiempo que mantienen la escalabilidad. Esta arquitectura permite a Astar Network gestionar un gran volumen de transacciones de contratos inteligentes, lo que la hace adecuada para aplicaciones descentralizadas (DApps) con requisitos computacionales exigentes."}),"\n",(0,n.jsx)(a.p,{children:"Adem\xe1s, Astar Network incorpora un amplio conjunto de herramientas y marcos de desarrollo para facilitar la creaci\xf3n, prueba y despliegue de contratos inteligentes. Entre ellos, un s\xf3lido kit de desarrollo de software (SDK), documentaci\xf3n detallada para desarrolladores y un entorno de desarrollo integrado (IDE) de f\xe1cil uso. Estos recursos permiten a los desarrolladores escribir contratos inteligentes seguros y eficientes, reduciendo el riesgo de vulnerabilidades y garantizando la fiabilidad de las aplicaciones descentralizadas."}),"\n",(0,n.jsx)(a.h2,{id:"contratos-inteligentes-de-webassembly",children:"Contratos inteligentes de WebAssembly"}),"\n",(0,n.jsxs)(a.p,{children:["Los tiempos de ejecuci\xf3n de Astar y Shiden se basan en Substrate, y ambas redes incorporan ",(0,n.jsx)(a.code,{children:"pallet-contracts"}),", un entorno aislado utilizado para desplegar y ejecutar contratos inteligentes WebAssembly. Cualquier lenguaje que compile a Wasm puede ser desplegado y ejecutado en esta M\xe1quina Virtual Wasm, sin embargo, el c\xf3digo debe ser compatible con la ",(0,n.jsx)(a.code,{children:"pallet-contracts"})," ",(0,n.jsx)(a.a,{href:"https://docs.rs/pallet-contracts/latest/pallet_contracts/api_doc/trait.Current.html",children:"API"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:["Para evitar complejidades innecesarias y la escritura de c\xf3digo repetitivo, el m\xe9todo m\xe1s apropiado de construcci\xf3n implicar\xe1 el uso de un eDSL espec\xedficamente dirigido a ",(0,n.jsx)(a.code,{children:"contratos-paleta"}),", como [ink!] (basado en Rust), o [Ask!] (basado en AssemblblyScript), o posiblemente otros, a medida que el ecosistema crece."]}),"\n",(0,n.jsx)(a.p,{children:"Despu\xe9s de la compilaci\xf3n, un blob de Wasm puede ser desplegado y almacenado en cadena."}),"\n",(0,n.jsx)(a.h2,{id:"contratos-inteligentes-de-m\xe1quina-virtual-de-ethereum",children:"Contratos inteligentes de m\xe1quina virtual de Ethereum"}),"\n",(0,n.jsx)(a.p,{children:"La implementaci\xf3n de Astar EVM se basa en el Substrate Pallet-EVM, y obtenemos una implementaci\xf3n completa de EVM basada en Rust.\nLos contratos inteligentes en Astar EVM pueden implementarse utilizando Solidity, Vyper, y cualquier otro lenguaje que pueda compilar contratos inteligentes a bytecode compatible con EVM. El objetivo de Pallet-EVM es proporcionar un entorno seguro y de bajas fricciones para el desarrollo, las pruebas y la ejecuci\xf3n de contratos inteligentes que sea compatible con la actual cadena de herramientas para desarrolladores de Ethereum."}),"\n",(0,n.jsx)(a.h2,{id:"aprende-m\xe1s",children:"Aprende m\xe1s"})]})}function u(e={}){const{wrapper:a}={...(0,s.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},11151:(e,a,t)=>{t.d(a,{Z:()=>i,a:()=>r});var n=t(67294);const s={},o=n.createContext(s);function r(e){const a=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:a},e.children)}}}]);