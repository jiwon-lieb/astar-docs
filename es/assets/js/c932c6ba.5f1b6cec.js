"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[8915],{58756:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=t(85893),r=t(11151);const i={sidebar_position:2},l="Flipper Contract",o={id:"tutorials/from-zero-to-ink-hero/flipper-contract/flipper",title:"Flipper Contract",description:"This is step-by-step explanation of the process behind building an ink! smart contract, using a simple app called Flipper. The examples provided within this guide will help you develop an understanding of the basic elements and structure of ink! smart contracts.",source:"@site/docs/tutorials/from-zero-to-ink-hero/flipper-contract/flipper.md",sourceDirName:"tutorials/from-zero-to-ink-hero/flipper-contract",slug:"/tutorials/from-zero-to-ink-hero/flipper-contract/flipper",permalink:"/es/docs/tutorials/from-zero-to-ink-hero/flipper-contract/flipper",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/tutorials/from-zero-to-ink-hero/flipper-contract/flipper.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Prerequisites",permalink:"/es/docs/tutorials/from-zero-to-ink-hero/flipper-contract/"},next:{title:"NFT Contract with PSP34",permalink:"/es/docs/tutorials/from-zero-to-ink-hero/nft/"}},a={},c=[{value:"What is Flipper?",id:"what-is-flipper",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Flipper Smart Contract",id:"flipper-smart-contract",level:2},{value:"The File Structure of Flipper",id:"the-file-structure-of-flipper",level:3},{value:"Flipper Contract <code>lib.rs</code>",id:"flipper-contract-librs",level:3},{value:"Contract Structure <code>lib.rs</code>",id:"contract-structure-librs",level:3},{value:"Storage",id:"storage",level:3},{value:"Callable Functions",id:"callable-functions",level:3},{value:"Test",id:"test",level:3},{value:"Compile, Deploy and Interact with Contracts",id:"compile-deploy-and-interact-with-contracts",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"flipper-contract",children:"Flipper Contract"}),"\n",(0,s.jsx)(n.p,{children:"This is step-by-step explanation of the process behind building an ink! smart contract, using a simple app called Flipper. The examples provided within this guide will help you develop an understanding of the basic elements and structure of ink! smart contracts."}),"\n",(0,s.jsx)(n.h2,{id:"what-is-flipper",children:"What is Flipper?"}),"\n",(0,s.jsxs)(n.p,{children:["Flipper is a basic smart contract that allows the user to toggle a boolean value located in storage to either ",(0,s.jsx)(n.code,{children:"true"})," or ",(0,s.jsx)(n.code,{children:"false"}),". When the flip function is called, the value will change from one to the other."]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.p,{children:["Please refer to the ",(0,s.jsx)(n.a,{href:"/es/docs/tutorials/from-zero-to-ink-hero/flipper-contract/",children:"previous section"})," for the list of prerequisites."]}),"\n",(0,s.jsx)(n.h2,{id:"flipper-smart-contract",children:"Flipper Smart Contract"}),"\n",(0,s.jsx)(n.p,{children:"In a new project folder, execute the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ cargo contract new flipper # flipper is introduced from the beginning.\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ cd flipper/\n$ cargo contract build #build flipper app\n"})}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udca1 If you receive an error such as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'ERROR: cargo-contract cannot build using the "stable" channel. Switch to nightly.\n'})}),"\n",(0,s.jsx)(n.p,{children:"Execute:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ rustup default nightly\n"})}),"\n",(0,s.jsx)(n.p,{children:"to reconfigure the default Rust toolchain to use the nightly build, or"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ cargo +nightly contract build\n"})}),"\n",(0,s.jsx)(n.p,{children:"to use the nightly build explicitly, which may be appropriate for developers working exclusively with ink!"}),"\n",(0,s.jsx)(n.p,{children:"Once the operation has finished, and the Flipper project environment has been initialized, we can perform an examination of the file and folder structure.\nLet\u2019s dive a bit deeper into the project structure:"}),"\n",(0,s.jsx)(n.h3,{id:"the-file-structure-of-flipper",children:"The File Structure of Flipper"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"target"}),": Contains build / binary information."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Cargo.lock"}),": The lock file for dependency package."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Cargo.toml"}),": The package configuration."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lib.rs"}),": The contract logic."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"flipper-contract-librs",children:["Flipper Contract ",(0,s.jsx)(n.code,{children:"lib.rs"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std)]\n\n#[ink::contract]\nmod flipper {\n\n    /// Defines the storage of your contract.\n    /// Add new fields to the below struct in order\n    /// to add new static storage fields to your contract.\n    #[ink(storage)]\n    pub struct Flipper {\n        /// Stores a single `bool` value on the storage.\n        value: bool,\n    }\n\n    impl Flipper {\n        /// Constructor that initializes the `bool` value to the given `init_value`.\n        #[ink(constructor)]\n        pub fn new(init_value: bool) -> Self {\n            Self { value: init_value }\n        }\n\n        /// Constructor that initializes the `bool` value to `false`.\n        ///\n        /// Constructors can delegate to other constructors.\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self::new(Default::default())\n        }\n\n        /// A message that can be called on instantiated contracts.\n        /// This one flips the value of the stored `bool` from `true`\n        /// to `false` and vice versa.\n        #[ink(message)]\n        pub fn flip(&mut self) {\n            self.value = !self.value;\n        }\n\n        /// Simply returns the current value of our `bool`.\n        #[ink(message)]\n        pub fn get(&self) -> bool {\n            self.value\n        }\n    }\n\n    /// Unit tests in Rust are normally defined within such a `#[cfg(test)]`\n    /// module and test functions are marked with a `#[test]` attribute.\n    /// The below code is technically just normal Rust code.\n    #[cfg(test)]\n    mod tests {\n        /// Imports all the definitions from the outer scope so we can use them here.\n        use super::*;\n\n        /// We test if the default constructor does its job.\n        #[ink::test]\n        fn default_works() {\n            let flipper = Flipper::default();\n            assert_eq!(flipper.get(), false);\n        }\n\n        /// We test a simple use case of our contract.\n        #[ink::test]\n        fn it_works() {\n            let mut flipper = Flipper::new(false);\n            assert_eq!(flipper.get(), false);\n            flipper.flip();\n            assert_eq!(flipper.get(), true);\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"contract-structure-librs",children:["Contract Structure ",(0,s.jsx)(n.code,{children:"lib.rs"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std)]\n\nuse ink_lang as ink;\n\n#[ink::contract]\nmod flipper {\n\n\t\t// This section defines storage for the contract.\n    #[ink(storage)]\n    pub struct Flipper {\n    }\n\n\t\t// This section defines the functional logic of the contract.\n    impl Flipper {\n    }\n\n\t\t// This section is used for testing, in order to verify contract validity.\n    #[cfg(test)]\n    mod tests {\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"storage",children:"Storage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"    #[ink(storage)]\n    pub struct Flipper {\n\n    }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This annotates a struct that represents the ",(0,s.jsx)(n.strong,{children:"contract's internal state."})," (",(0,s.jsx)(n.a,{href:"https://use.ink/macros-attributes/storage",children:"details"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Storage types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Rust primitives types","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"bool"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"u{8,16,32,64,128}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"i{8,16,32,64,128}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"String"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Substrate specific types","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"AccountId"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Balance"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Hash"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["ink! storage type","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Mapping"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Custom data structure ",(0,s.jsx)(n.a,{href:"https://use.ink/datastructures/custom-datastructure",children:"details"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This means the contract (Flipper) stores a single ",(0,s.jsx)(n.code,{children:"bool"})," value in storage."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\npub struct Flipper {\n    value: bool,\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"callable-functions",children:"Callable Functions"}),"\n",(0,s.jsxs)(n.p,{children:["At the time the contract is deployed, a constructor is responsible for ",(0,s.jsx)(n.strong,{children:"bootstrapping the initial state"})," into storage. ",(0,s.jsx)(n.a,{href:"https://use.ink/macros-attributes/constructor",children:"For more information"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(constructor)]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The addition of the following function will initialize ",(0,s.jsx)(n.code,{children:"bool"})," to the specified ",(0,s.jsx)(n.code,{children:"init_value"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(constructor)]\npub fn new(init_value: bool) -> Self {\n    Self { value: init_value }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Contracts can also contain multiple constructors. Here is a constructor that assigns a default value to ",(0,s.jsx)(n.code,{children:"bool"}),". As other language, default value of ",(0,s.jsx)(n.code,{children:"bool"})," is ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(constructor)]\npub fn default() -> Self {\n    Self::new(Default::default())\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The following will permit a function to be ",(0,s.jsx)(n.strong,{children:"publicly dispatchable"}),", meaning that  the function can be called through a message, which is a way for contracts and external accounts to interact with the contract. Find more information ",(0,s.jsx)(n.a,{href:"https://use.ink/macros-attributes/message",children:"here"}),"). Note that all public functions ",(0,s.jsx)(n.strong,{children:"must"})," use the ",(0,s.jsx)(n.code,{children:"#[ink(message)]"})," attribute."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(message)]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"flip"})," function modifies storage items, and ",(0,s.jsx)(n.code,{children:"get"})," function retrieves a storage item."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(message)]\npub fn flip(&mut self) {\n    self.value = !self.value;\n}\n\n#[ink(message)]\npub fn get(&self) -> bool {\n    self.value\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udca1 If you are simply ",(0,s.jsx)(n.em,{children:"reading"})," from contract storage, you will only need to pass ",(0,s.jsx)(n.code,{children:"&self"}),", but if you wish to ",(0,s.jsx)(n.em,{children:"modify"})," storage items, you will need to explicitly mark it as mutable ",(0,s.jsx)(n.code,{children:"&mut self"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl Flipper {\n\n        #[ink(constructor)]\n        pub fn new(init_value: bool) -> Self {\n            Self { value: init_value }\n        }\n\n        /// Constructor that initializes the `bool` value to `false`.\n        ///\n        /// Constructors can delegate to other constructors.\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self::new(Default::default())\n        }\n\n        /// A message that can be called on instantiated contracts.\n        /// This one flips the value of the stored `bool` from `true`\n        /// to `false` and vice versa.\n        #[ink(message)]\n        pub fn flip(&mut self) {\n            self.value = !self.value;\n        }\n\n        /// Simply returns the current value of our `bool`.\n        #[ink(message)]\n        pub fn get(&self) -> bool {\n            self.value\n        }\n    }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"test",children:"Test"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[cfg(test)]\n    mod tests {\n        /// Imports all the definitions from the outer scope so we can use them here.\n        use super::*;\n\n        /// Imports `ink_lang` so we can use `#[ink::test]`.\n        use ink_lang as ink;\n\n        /// We test if the default constructor does its job.\n        #[ink::test]\n        fn default_works() {\n            let flipper = Flipper::default();\n            assert_eq!(flipper.get(), false);\n        }\n\n        /// We test a simple use case of our contract.\n        #[ink::test]\n        fn it_works() {\n            let mut flipper = Flipper::new(false);\n            assert_eq!(flipper.get(), false);\n            flipper.flip();\n            assert_eq!(flipper.get(), true);\n        }\n    }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"compile-deploy-and-interact-with-contracts",children:"Compile, Deploy and Interact with Contracts"}),"\n",(0,s.jsxs)(n.p,{children:["Follow this guide to deploy your contract ",(0,s.jsx)(n.a,{href:"https://docs.astar.network/docs/build/wasm/tooling/polkadotjs/",children:"using Polkadot UI"}),". Once deployed, you will be able to interact with it."]})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>l});var s=t(67294);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);