"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[3933],{99580:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=i(85893),n=i(11151),r=i(3837);const a={sidebar_position:1},d="Subsquid",o={id:"build/integrations/indexers/subsquid",title:"Subsquid",description:"Subsquid is an indexing framework supporting both Substrate and EVM-based chains. It is extremely flexible and offers high syncing speeds.",source:"@site/docs/build/integrations/indexers/subsquid.md",sourceDirName:"build/integrations/indexers",slug:"/build/integrations/indexers/subsquid",permalink:"/es/docs/build/integrations/indexers/subsquid",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/integrations/indexers/subsquid.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"GraphQL Data Sources and Indexers",permalink:"/es/docs/build/integrations/indexers/"},next:{title:"SubQuery",permalink:"/es/docs/build/integrations/indexers/subquery"}},c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"EVM/Solidity",id:"evmsolidity",level:2},{value:"Developing an EVM/Solidity squid from a template",id:"developing-an-evmsolidity-squid-from-a-template",level:3},{value:"Generating an EVM/Solidity squid",id:"generating-an-evmsolidity-squid",level:3},{value:"WASM/ink!",id:"wasmink",level:2},{value:"Developing a WASM/ink! squid from a template",id:"developing-a-wasmink-squid-from-a-template",level:3},{value:"Starting the squid",id:"starting-the-squid",level:2},{value:"Next steps",id:"next-steps",level:2}];function h(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"subsquid",children:"Subsquid"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://subsquid.io",children:"Subsquid"})," is an indexing framework supporting both ",(0,t.jsx)(s.a,{href:"/es/docs/learn/architecture/astar-parachain#substrate",children:"Substrate"})," and ",(0,t.jsx)(s.a,{href:"/es/docs/learn/architecture/astar-parachain#ethereum-virtual-machine-evm",children:"EVM"}),"-based chains. It is ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/migrate/subsquid-vs-thegraph/",children:"extremely flexible and offers high syncing speeds"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:['Subsquid indexer projects (or "squids") can be made from templates either manually or with ',(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/basics/squid-gen/",children:"squid generation tools"}),". The tools make ready-to-use indexer projects out of contracts' ABIs. The generated squids decode events and transactions of user-specified contracts, then serve the data over a GraphQL API or store it as a dataset on a filesystem. At the moment EVM/Solidity contracts are supported, with WASM/ink! contracts in the pipeline. Consider this route if your use case does not require any nontrivial transformations of blockchain data."]}),"\n",(0,t.jsxs)(s.p,{children:["Implementation-wise, squids are just regular NodeJS processes that can be extended with regular Typescript code. They can ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/basics/squid-processor/#processorrun",children:"apply arbitrary transformations to the data"}),", query the contract state (",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/evm-indexing/query-state/",children:"EVM"}),"/",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/substrate-indexing/specialized/wasm/#state-queries",children:"WASM"}),") or ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/basics/external-api/",children:"mix in some data from external sources like APIs or IPFS"}),". Mixing data from multiple chains is ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/basics/multichain/",children:"supported"}),". If a squid is serving its data over a GraphQL server, that can be extended too with ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/graphql-api/custom-resolvers/",children:"custom queries"})," and simple ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/graphql-api/authorization/",children:"access control"}),". Check out Subsquid's ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io",children:"extensive documentation"})," to learn more about its features."]}),"\n",(0,t.jsxs)(s.p,{children:["Squids can run either on your infrastructure or in ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/deploy-squid/",children:"Subsquid Cloud"})," (former Aquarium). The service has and will always have a free tier. For more demanding applications it offers ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/deploy-squid/pricing/",children:"paid plans"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"NodeJS v16 or newer"}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/squid-cli/installation/",children:"Subsquid CLI"})}),"\n",(0,t.jsx)(s.li,{children:"Docker (if you want your data in PostgreSQL and/or served via a GraphQL API)"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"evmsolidity",children:"EVM/Solidity"}),"\n",(0,t.jsxs)(s.p,{children:["There are two primary ways to index EVM contracts deployed to ",(0,t.jsx)(s.a,{href:"/docs/learn/networks",children:"Astar networks"})," with Subsquid:"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["With a ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/substrate-indexing/",children:"Substrate processor"})," utilizing its ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/substrate-indexing/evm-support/",children:"support for the Frontier EVM pallet"}),". This is useful when both EVM and Substrate data is required. If that is your use case, check out ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/tutorials/create-an-evm-processing-squid/",children:"this tutorial"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["With a ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/evm-indexing/",children:"native EVM processor"}),". This simpler and more performant approach will be the focus of this section. Within it, you can choose to either"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"develop a squid from a template or"}),"\n",(0,t.jsx)(s.li,{children:"auto-generate it."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Take the latter approach to obtain the decoded events and/or transactions data from a fixed set of contracts rapidly, but be aware that the autogenerated squids are not meant to be used for further development."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Subsquid supports the following Astar networks for native EVM indexing:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"astar"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"astar-zkatana"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"astar-zkevm"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"shiden"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"shibuya"})}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"developing-an-evmsolidity-squid-from-a-template",children:"Developing an EVM/Solidity squid from a template"}),"\n",(0,t.jsxs)(s.p,{children:["Retrieve the ",(0,t.jsx)(s.code,{children:"evm"})," squid template and install dependencies:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sqd init my-evm-squid -t evm\ncd my-evm-squid\nnpm ci\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Verify that the template squid works by ",(0,t.jsx)(s.a,{href:"#starting-the-squid",children:"starting it"}),", then follow the ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/basics/squid-development/",children:"Development Flow guide"}),". Your major tasks will be:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Setting the ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/evm-indexing/supported-networks/",children:"source network"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Requesting the raw data by further ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/evm-indexing/configuration/",children:"configuring"})," the ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/evm-indexing/",children:"EVM processor"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Defining the data model of outbound data (",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/store/postgres/schema-file/",children:"GraphQL/PostgreSQL"})," or ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/store/file-store/overview/#database-options",children:"file-based"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/evm-indexing/squid-evm-typegen/",children:"Decoding EVM events and transactions"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Transforming the decoded data within the ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/basics/squid-processor/#processorrun",children:"batch handler"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Check out the tutorial on ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/tutorials/bayc/",children:"indexing BAYC"})," for a step-by-step guide into developing an EVM-native squid. If you want to save your data to a file-based dataset, take a look at the tutorials on writing to ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/tutorials/index-to-local-csv-files/",children:"CSV"})," or to ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/tutorials/parquet-file-store/",children:"Apache Parquet"})," files. If you are a contract developer you can follow ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/tutorials/ethereum-local-development/",children:"this guide"})," to index contracts deployed to local EVM development environments, for pre-deployment integration tests."]}),"\n",(0,t.jsx)(s.h3,{id:"generating-an-evmsolidity-squid",children:"Generating an EVM/Solidity squid"}),"\n",(0,t.jsxs)(s.p,{children:["A squid indexing events and calls listed in a contract ABI can be generated with the ",(0,t.jsx)(s.code,{children:"@subsquid/squid-gen"})," tool. Begin by creating a new project with the tool's complementary template, ",(0,t.jsx)(s.code,{children:"abi"}),", and installing dependencies:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sqd init my-evm-squid -t abi\ncd my-evm-squid\nnpm ci\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Next, obtain any contract ABIs and save them to the ",(0,t.jsx)(s.code,{children:"./abi"})," folder. I will be indexing the ",(0,t.jsx)(s.a,{href:"https://blockscout.com/astar/address/0xA9473608514457b4bF083f9045fA63ae5810A03E",children:"PancakeFactory"})," and ",(0,t.jsx)(s.a,{href:"https://blockscout.com/astar/address/0xE915D2393a08a00c5A463053edD31bAe2199b9e7",children:"PancakeRouter"})," contracts of ",(0,t.jsx)(s.a,{href:"https://arthswap.org",children:"Arthswap"}),', taking their ABIs from the Blockscout pages ("Code" tab, "Contract ABI" section) and saving them to ',(0,t.jsx)(s.code,{children:"./abi/factory.json"})," and ",(0,t.jsx)(s.code,{children:"./abi/router.json"}),", correspondingly."]}),"\n",(0,t.jsxs)(s.p,{children:["Next, make a ",(0,t.jsx)(s.code,{children:"squidgen.yaml"})," configuration file like this one:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:'archive: astar\ntarget:\n  type: postgres\ncontracts:\n  - name: pancakeFactory\n    abi: "./abi/factory.json"\n    address: "0xA9473608514457b4bF083f9045fA63ae5810A03E"\n    events: true\n    functions:\n      - feeTo\n      - feeToSetter\n  - name: pancakeRouter\n    abi: "./abi/router.json"\n    address: "0xE915D2393a08a00c5A463053edD31bAe2199b9e7"\n    events: true\n    functions: true\n'})}),"\n",(0,t.jsx)(s.p,{children:"Here,"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"archive"})," is an alias or an endpoint URL of a chain-specific data lake responsible for the initial ingestion and filtration of the data. Aliases for Astar networks are ",(0,t.jsx)(s.code,{children:"astar"}),", ",(0,t.jsx)(s.code,{children:"astar-zkatana"}),", ",(0,t.jsx)(s.code,{children:"shibuya"})," and ",(0,t.jsx)(s.code,{children:"shiden"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"target"})," section describes how the scraped data should be stored. The example above uses a PostgreSQL database that can be presented to users as a GraphQL API or used as-is. Another option is to ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/basics/squid-gen/#file-store-targets",children:"store the data to a file-based dataset"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"contracts"})," is a list of contracts to be indexed. ",(0,t.jsx)(s.code,{children:"name"}),", ",(0,t.jsx)(s.code,{children:"abi"})," and ",(0,t.jsx)(s.code,{children:"address"})," fields are requred. ",(0,t.jsx)(s.code,{children:"events: true"})," requests that all events listed in the ABI are decoded and indexed; ",(0,t.jsx)(s.code,{children:"functions: true"})," means the same for function calls. You can also list individual events and calls for a more compact squid."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Generate the squid code with"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"npx squid-gen config squidgen.yaml\n"})}),"\n",(0,t.jsxs)(s.p,{children:["and give your new squid ",(0,t.jsx)(s.a,{href:"#starting-the-squid",children:"a test run"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"wasmink",children:"WASM/ink!"}),"\n",(0,t.jsx)(s.p,{children:"Subsquid supports indexing ink! contracts deployed to the following Astar networks:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"astar"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"shiden"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"shibuya"})}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"developing-a-wasmink-squid-from-a-template",children:"Developing a WASM/ink! squid from a template"}),"\n",(0,t.jsxs)(s.p,{children:["Retrieve the ",(0,t.jsx)(s.code,{children:"ink"})," squid template and install dependencies:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sqd init my-ink-squid -t ink\ncd my-ink-squid\nnpm ci\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Verify that the template squid works by ",(0,t.jsx)(s.a,{href:"#starting-the-squid",children:"starting it"}),", then follow the ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/basics/squid-development/",children:"Development Flow guide"}),". Your major tasks will be:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Setting the ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/substrate-indexing/supported-networks/",children:"source network"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Requesting the raw data by further ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/substrate-indexing/setup/",children:"configuring"})," the ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/substrate-indexing/",children:"Substrate processor"}),", particularly ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/substrate-indexing/specialized/wasm/",children:"subscribing to the relevant ink! events"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Defining the data model of outbound data (",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/store/postgres/schema-file/",children:"GraphQL/PostgreSQL"})," or ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/store/file-store/overview/#database-options",children:"file-based"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/substrate-indexing/specialized/wasm/#ink-typegen",children:"Decoding ink! contract events"})," and possibly ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/substrate-indexing/squid-substrate-typegen/",children:"other Substrate events, calls, storage items or constants"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Transforming the decoded data within the ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/basics/squid-processor/#processorrun",children:"batch handler"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["You can also check out the end-to-end ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/tutorials/create-a-wasm-processing-squid/",children:"ink! contract indexing tutorial"})," maintained by Subsquid."]}),"\n",(0,t.jsx)(s.h2,{id:"starting-the-squid",children:"Starting the squid"}),"\n",(0,t.jsx)(s.p,{children:"Once you've retrieved a template or generated a squid it is time to give it a local test run."}),"\n",(0,t.jsxs)(s.p,{children:["If you used a ",(0,t.jsx)(s.code,{children:"postgres"})," target prepare the database and migrations by running"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sqd up # starts a database container\nsqd migration:generate\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Skip this if you used a ",(0,t.jsx)(s.code,{children:"parquet"})," target."]}),"\n",(0,t.jsxs)(s.p,{children:["Next, start a squid ",(0,t.jsx)(s.em,{children:"processor"})," - the process that ingests data from the archive:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sqd process\n"})}),"\n",(0,t.jsx)(s.p,{children:"You should see the processor apply the migrations and start the ingestion, producing messages like"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"05:26:16 INFO  sqd:processor 3483256 / 3483256, rate: 1045307 blocks/sec, mapping: 294 blocks/sec, 261 items/sec, ingest: 10 blocks/sec, eta: 0s\n05:26:35 INFO  sqd:processor 3483257 / 3483257, rate: 157368 blocks/sec, mapping: 211 blocks/sec, 169 items/sec, ingest: 10 blocks/sec, eta: 0s\n05:26:56 INFO  sqd:processor 3483259 / 3483259, rate: 79846 blocks/sec, mapping: 151 blocks/sec, 101 items/sec, ingest: 9 blocks/sec, eta: 0s\n"})}),"\n",(0,t.jsx)(s.p,{children:"If the data is stored to the database, it should appear there almost instantaneously. Check it out with"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"PGPASSWORD=postgres psql -U postgres -p 23798 -h localhost squid\n"})}),"\n",(0,t.jsxs)(s.p,{children:["For file-based targets synchronization ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/store/file-store/overview/#filesystem-syncs-and-dataset-partitioning",children:"takes longer"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"If you want to serve the scraped data over GraphQL you will need to start a separate GraphQL server process. Processor blocks the terminal, so open another one, navigate to the squid project folder and run"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sqd serve\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The server will listen at localhost:4350, with a ",(0,t.jsx)(s.a,{href:"https://github.com/graphql/graphiql",children:"GraphiQL"})," playground available at ",(0,t.jsx)(s.a,{href:"http://localhost:4350/graphql",children:"http://localhost:4350/graphql"}),":"]}),"\n",(0,t.jsx)(r.Z,{caption:"GraphiQL playground",src:i(7723).Z,width:"100%"}),"\n",(0,t.jsx)(s.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,t.jsx)(s.p,{children:"Once you've developed and tested your squid, you can run it on your own infrastructure or use Subsquid Cloud. In the simplest case, the deployment can be done with just"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sqd deploy .\n"})}),"\n",(0,t.jsxs)(s.p,{children:["after ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/squid-cli/installation/#1-obtain-a-subsquid-cloud-deployment-key",children:"authenticating with Cloud"}),". For more complex scenarios see the ",(0,t.jsx)(s.a,{href:"https://docs.subsquid.io/deploy-squid/",children:"Deploy a Squid"})," section of the framework documentation."]}),"\n",(0,t.jsxs)(s.p,{children:["Subsquid team can be reached via ",(0,t.jsx)(s.a,{href:"https://t.me/HydraDevs",children:"Telegram"})," and ",(0,t.jsx)(s.a,{href:"https://discord.com/invite/subsquid",children:"Discord"}),". Feel free to stop by and chat!"]})]})}function u(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},3837:(e,s,i)=>{i.d(s,{Z:()=>n});i(67294);var t=i(85893);function n(e){let{src:s,caption:i,width:n="460px"}=e;return(0,t.jsxs)("center",{children:[(0,t.jsx)("br",{}),(0,t.jsxs)("figure",{children:[(0,t.jsx)("img",{src:s,alt:i,width:n}),(0,t.jsx)("figcaption",{children:i})]}),(0,t.jsx)("br",{})]})}},7723:(e,s,i)=>{i.d(s,{Z:()=>t});const t=i.p+"assets/images/subsquidGraphiql-e7db5d1f50b4fc69e29d384d7e194139.png"},11151:(e,s,i)=>{i.d(s,{Z:()=>d,a:()=>a});var t=i(67294);const n={},r=t.createContext(n);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);