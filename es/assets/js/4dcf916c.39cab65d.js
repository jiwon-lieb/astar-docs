"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[519],{60039:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>t,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var l=n(85893),r=n(11151);const s={},t="XVM",o={id:"learn/interoperability/xvm/index",title:"XVM",description:"Tenga en cuenta que en este momento las caracter\xedsticas de XVM s\xf3lo se lanzan en la red de prueba Shibuya. \xa1Mantente atento a Shiden y Astar!",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/learn/interoperability/xvm/index.md",sourceDirName:"learn/interoperability/xvm",slug:"/learn/interoperability/xvm/",permalink:"/es/docs/learn/interoperability/xvm/",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/learn/interoperability/xvm/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FAQ",permalink:"/es/docs/learn/interoperability/xcm/faq"},next:{title:"Astar zkEVM",permalink:"/es/docs/learn/zkEVM/"}},i={},c=[{value:"Intro: M\xfaltiples VMs como una; una VM para todos",id:"intro-m\xfaltiples-vms-como-una-una-vm-para-todos",level:2},{value:"Arquitectura",id:"arquitectura",level:2},{value:"Componentes",id:"componentes",level:3},{value:"Llamadas entre VM",id:"llamadas-entre-vm",level:3},{value:"Interfaces",id:"interfaces",level:3},{value:"codificaci\xf3n de <code>entrada</code>",id:"codificaci\xf3n-de-entrada",level:4},{value:"Caracter\xedsticas entre los contratos EVM y Wasm",id:"caracter\xedsticas-entre-los-contratos-evm-y-wasm",level:4},{value:"Manejo de errores",id:"manejo-de-errores",level:3}];function d(e){const a={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.h1,{id:"xvm",children:"XVM"}),"\n",(0,l.jsx)(a.p,{children:"Tenga en cuenta que en este momento las caracter\xedsticas de XVM s\xf3lo se lanzan en la red de prueba Shibuya. \xa1Mantente atento a Shiden y Astar!"}),"\n",(0,l.jsx)(a.h2,{id:"intro-m\xfaltiples-vms-como-una-una-vm-para-todos",children:"Intro: M\xfaltiples VMs como una; una VM para todos"}),"\n",(0,l.jsx)(a.p,{children:"Como plataforma de contrato inteligente, Astar Network soporta actualmente tanto los contratos EVM como Wasm (WebAssembly). Basado en necesidades espec\xedficas, los desarrolladores son libres de construir sobre cualquiera de las m\xe1quinas virtuales. Esto aporta flexibilidad tanto a los constructores como a los grupos m\xe1s grandes de usuarios de Astar Network. Pero el equipo Astar no s\xf3lo se detiene all\xed. A\xfan mejor, nuestra soluci\xf3n multi-VM, XVM, se introduce para proporcionar una verdadera interoperabilidad entre diferentes m\xe1quinas virtuales."}),"\n",(0,l.jsx)(a.p,{children:"XVM permite que los contratos inteligentes en diferentes m\xe1quinas virtuales trabajen juntos sin problemas. Un contrato inteligente en EVM puede llamar a un contrato de Wasm al igual que otro contrato EVM y viceversa. Desde la perspectiva EVM o Wasm, los contratos en diferentes m\xe1quinas virtuales pueden funcionar juntos como en uno: la XVM."}),"\n",(0,l.jsx)(a.h2,{id:"arquitectura",children:"Arquitectura"}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.img,{alt:"XVM.png",src:n(12249).Z+"",width:"2781",height:"2181"})}),"\n",(0,l.jsx)(a.h3,{id:"componentes",children:"Componentes"}),"\n",(0,l.jsx)(a.p,{children:"La arquitectura XVM contiene cinco componentes principales:"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"pallet-xvm"}),": el m\xf3dulo Hub para llamar EVM o Wasm."]}),"\n",(0,l.jsxs)(a.li,{children:["Precompilados XVM: una precompilaci\xf3n personalizada que permite a los contratos EVM llamar ",(0,l.jsx)(a.code,{children:"pallet-xvm"})," ."]}),"\n",(0,l.jsxs)(a.li,{children:["Chain extension: la interfaz que permite a ink! contratos para llamar a ",(0,l.jsx)(a.code,{children:"pallet-xvm"})]}),"\n",(0,l.jsx)(a.li,{children:"EVM: Implementaci\xf3n Astar EVM, que es compatible con Ethereum."}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"pallet-contracts"}),": la VM para ink! smart contracts."]}),"\n"]}),"\n",(0,l.jsxs)(a.p,{children:["El m\xf3dulo ",(0,l.jsx)(a.code,{children:"pallet-xvm"})," es la parte central de XVM. Proporciona funciones para permitir que otros componentes llamen EVM o Wasm, mientras que ",(0,l.jsx)(a.em,{children:"XVM precompile"})," y ",(0,l.jsx)(a.em,{children:"chain extension"})," juegan el papel de las pasarelas de los contratos para llamar al m\xf3dulo ",(0,l.jsx)(a.code,{children:"pallet-xvm"}),"."]}),"\n",(0,l.jsx)(a.h3,{id:"llamadas-entre-vm",children:"Llamadas entre VM"}),"\n",(0,l.jsx)(a.p,{children:"Una llamada XVM t\xedpica podr\xeda ser:"}),"\n",(0,l.jsxs)(a.ol,{children:["\n",(0,l.jsx)(a.li,{children:"Llama desde EVM al Wasm, o"}),"\n",(0,l.jsx)(a.li,{children:"Llama desde Wasm a EVM"}),"\n"]}),"\n",(0,l.jsxs)(a.p,{children:["Para las llamadas de EVM a Wasm, la llamada se iniciar\xe1 mediante contratos inteligentes en EVM. La ruta de llamada es: contrato EVM -> precompilado -> ",(0,l.jsx)(a.code,{children:"pallet-xvm"})," -> Wasm."]}),"\n",(0,l.jsxs)(a.p,{children:["Para las llamadas de Wasm a EVM, la llamada se iniciar\xe1 mediante contratos inteligentes en Wasm. La ruta de llamada es: Wasm contract -> chain extension -> ",(0,l.jsx)(a.code,{children:"pallet-xvm"})," -> EVM."]}),"\n",(0,l.jsx)(a.p,{children:"Tenga en cuenta que s\xf3lo se permite llamar desde una m\xe1quina virtual a otra. Llamar a los contratos dentro de la misma VM ser\xe1 revertido con un error."}),"\n",(0,l.jsx)(a.h3,{id:"interfaces",children:"Interfaces"}),"\n",(0,l.jsx)(a.p,{children:"Para los contratos EVM de solidity, la interfaz XVM se define de la siguiente manera:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-solidity",children:"interface XVM {\n    function xvm_call(\n        uint8 vm_id,\n        bytes calldata to,\n        bytes calldata input,\n        uint256 value,\n        uint256 storage_deposit_limit\n    ) external payable returns (bool success, bytes memory data);\n}\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Para ink! Wasm contracts, XVM se puede llamar con ",(0,l.jsx)(a.em,{children:"chain extension"}),":"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-rust",children:"pub type CallResult = u32;\n\n#[ink::chain_extension]\npub trait XvmCall {\n    type ErrorCode = u32;\n\n    #[ink(extension = 0x00010001, handle_status = false)]\n    fn call(vm_id: u8, target: Vec<u8>, input: Vec<u8>, value: u128) -> CallResult;\n}\n"})}),"\n",(0,l.jsx)(a.p,{children:"Los contratos EVM y Wasm tienen una interfaz similar para las llamadas XVM. Los argumentos comunes que comparten:"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"vm_id"}),": ID de la m\xe1quina virtual de destino a llamar. Usa ",(0,l.jsx)(a.code,{children:"0x0F"})," para llamar a EVM y ",(0,l.jsx)(a.code,{children:"0x1F"})," para llamar a Wasm."]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"to"}),": la direcci\xf3n del contrato objetivo. Para contratos EVM, es en bytes ",(0,l.jsx)(a.code,{children:"H160"}),". Para Wasm son bytes ",(0,l.jsx)(a.code,{children:"AccountId32"}),"."]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"input"}),": los argumentos de llamada codificados."]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"value"}),": la cantidad de token nativo a transferir, usado para llamadas pagables."]}),"\n"]}),"\n",(0,l.jsxs)(a.p,{children:["Tenga en cuenta que en el contexto de la VM de llamada, la direcci\xf3n de llamada es siempre la direcci\xf3n del contrato de llamada, en lugar de la direcci\xf3n de usuario. \xa1Por ejemplo, Alice llama a un contrato inteligente EVM ",(0,l.jsx)(a.code,{children:"ContractA"})," que llama a un ink! contrato, dentro de ink! la llamada del contrato, la ",(0,l.jsx)(a.code,{children:"self.env.caller"})," es la direcci\xf3n ",(0,l.jsx)(a.code,{children:"ContractA"})," en lugar de Alice."]}),"\n",(0,l.jsxs)(a.h4,{id:"codificaci\xf3n-de-entrada",children:["codificaci\xf3n de ",(0,l.jsx)(a.code,{children:"entrada"})]}),"\n",(0,l.jsxs)(a.p,{children:["Como se ha mencionado anteriormente, ",(0,l.jsx)(a.code,{children:"input"})," de los argumentos codificados es necesario para las llamadas XVM. La especificaci\xf3n de codificaci\xf3n depende de qu\xe9 m\xe1quina virtual llamar."]}),"\n",(0,l.jsxs)(a.p,{children:["Para llamadas a EVM (",(0,l.jsx)(a.code,{children:"0x0F"})," como VM Id), consulte ",(0,l.jsx)(a.a,{href:"https://docs.soliditylang.org/en/latest/abi-spec.html#function-selector-and-argument-encoding",children:"aqu\xed"})," para especificaciones Solidity ABI ",(0,l.jsx)(a.a,{href:"https://docs.soliditylang.org/en/latest/abi-spec.html#examples",children:"aqu\xed"})," para ejemplos."]}),"\n",(0,l.jsxs)(a.p,{children:["Para llamadas a Wasm (",(0,l.jsx)(a.code,{children:"0x1F"})," como VM Id), el ",(0,l.jsx)(a.code,{children:"input"})," est\xe1 codificado como: ",(0,l.jsx)(a.code,{children:"selector_bytes ++ scale_encoded_args"}),"."]}),"\n",(0,l.jsx)(a.h4,{id:"caracter\xedsticas-entre-los-contratos-evm-y-wasm",children:"Caracter\xedsticas entre los contratos EVM y Wasm"}),"\n",(0,l.jsxs)(a.p,{children:["En el caso de llamar de EVM a Wasm, para llamar a XVM en EVM, se necesita un par\xe1metro adicional ",(0,l.jsx)(a.code,{children:"storage_deposit_limit"}),". Es obligatorio por ",(0,l.jsx)(a.code,{children:"palet-contracts"}),", especificar el dep\xf3sito m\xe1ximo de almacenamiento para pagar el alquiler de almacenamiento. Como se mencion\xf3 anteriormente, ya que la direcci\xf3n de la persona que llama siempre es una direcci\xf3n de contrato en lugar de un usuario, es la direcci\xf3n del contrato que paga el alquiler del almacenamiento. Para contratos de solidity que llaman contratos de Wasm a trav\xe9s de XVM, los desarrolladores necesitan asegurarse de que el contrato tiene el saldo suficiente para el pago, o la llamada falla. Para pasar un valor suficiente de ",(0,l.jsx)(a.code,{children:"storage_deposit_limit"}),", los desarrolladores necesitan saber cu\xe1nto se requiere del contrato de llamada. Por ejemplo, pueden comparar la llamada objetivo y obtener el l\xedmite en el peor escenario ",(0,l.jsx)(a.code,{children:"N"}),", y pasar ",(0,l.jsx)(a.code,{children:"2 x N"})," por margen de seguridad."]}),"\n",(0,l.jsxs)(a.p,{children:["Otra diferencia que vale la pena mencionar para las llamadas a pagar de EVM a Wasm es el concepto de ",(0,l.jsx)(a.em,{children:"ED(dep\xf3sito existencial)"})," en ",(0,l.jsx)(a.code,{children:"pallet-contracts"}),". Usando el ",(0,l.jsx)(a.code,{children:"pallet-balances"})," en Substrate para llamadas a pagar, ",(0,l.jsx)(a.code,{children:"pallet-contracts"})," asume todas las direcciones, incluyendo la direcci\xf3n de los contratos EVM necesitan cumplir con el requisito de balance m\xednimo para mantener vivo (lo cual no es cierto ya que no hay requisitos de ED en EVM). Como se mencion\xf3 anteriormente, la direcci\xf3n de llamada es siempre el contrato de llamada, para llamadas a pagar de EVM a Wasm, los desarrolladores necesitan asegurarse de que su direcci\xf3n de contrato EVM cumple con el requerimiento de ED, de lo contrario, la llamada pagadera fallar\xe1 en Wasm y ser\xe1 revertida."]}),"\n",(0,l.jsx)(a.h3,{id:"manejo-de-errores",children:"Manejo de errores"}),"\n",(0,l.jsx)(a.p,{children:"Los errores incurridos en las llamadas XVM burbujean desde la VM llamante a la VM llamada. Si se devuelve un error en EVM o Wasm, se revertir\xe1 toda la llamada XVM."})]})}function m(e={}){const{wrapper:a}={...(0,r.a)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},12249:(e,a,n)=>{n.d(a,{Z:()=>l});const l=n.p+"assets/images/xvm-architecture-8913b73ed535de304db5165978b85f3e.png"},11151:(e,a,n)=>{n.d(a,{Z:()=>o,a:()=>t});var l=n(67294);const r={},s=l.createContext(r);function t(e){const a=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),l.createElement(s.Provider,{value:a},e.children)}}}]);