"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[3078],{48351:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(85893),s=t(11151);const i={sidebar_position:3},r="Banana SDK",o={id:"build/integrations/account-abstraction/banana/index",title:"Banana SDK",description:"Introduction",source:"@site/docs/build/integrations/account-abstraction/banana/index.md",sourceDirName:"build/integrations/account-abstraction/banana",slug:"/build/integrations/account-abstraction/banana/",permalink:"/es/docs/build/integrations/account-abstraction/banana/",draft:!1,unlisted:!1,editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/build/integrations/account-abstraction/banana/index.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Account Abstraction",permalink:"/es/docs/build/integrations/account-abstraction/"},next:{title:"Overview",permalink:"/es/docs/build/integrations/account-abstraction/biconomy/"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Step 1: Create a new repo with create-react-app",id:"step-1-create-a-new-repo-with-create-react-app",level:3},{value:"Step 2: Installing banana sdk package",id:"step-2-installing-banana-sdk-package",level:3},{value:"Step 3: Smart Contract deployment",id:"step-3-smart-contract-deployment",level:3},{value:"Step 4: Building the front end",id:"step-4-building-the-front-end",level:3},{value:"Step 5: Imports",id:"step-5-imports",level:3},{value:"Step 6: Initializing Banana SDK instance and creating methods",id:"step-6-initializing-banana-sdk-instance-and-creating-methods",level:3},{value:"Step 7: Building the frontend",id:"step-7-building-the-frontend",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Learn more",id:"learn-more",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"banana-sdk",children:"Banana SDK"}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(n.p,{children:"In this tutorial we will show how you can integrate Banana Wallet to your JavaScript or TypeScript-based frontend. We will demonstrate how to create a new wallet or connect an existing Banana Wallet on any dApp on Astar Network."}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Basic JavaScript/Typescript knowledge."}),"\n",(0,a.jsx)(n.li,{children:"Enthusiasm to build an amazing dApp on Astar."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,a.jsx)(n.h3,{id:"step-1-create-a-new-repo-with-create-react-app",children:"Step 1: Create a new repo with create-react-app"}),"\n",(0,a.jsxs)(n.p,{children:["Create a new react project with react with name ",(0,a.jsx)(n.code,{children:"banana-sdk-demo"})," and now let's move into to the it."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npx create-react-app banana-sdk-demo\ncd banana-sdk-demo\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-installing-banana-sdk-package",children:"Step 2: Installing banana sdk package"}),"\n",(0,a.jsx)(n.p,{children:"Install @rize-labs/banana-wallet-sdk package with"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install @rize-labs/banana-wallet-sdk\nor\nyarn add @rize-labs/banana-wallet-sdk\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-smart-contract-deployment",children:"Step 3: Smart Contract deployment"}),"\n",(0,a.jsx)(n.p,{children:"For this demo we will be using a  very basic smart contract with only two functionalities:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Make a transaction to the blockchain by making a state variable change its value."}),"\n",(0,a.jsx)(n.li,{children:"Fetch value of state variable."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Code for smart contract"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"pragma solidity ^0.8.12;\n\ncontract Sample {\n\n    uint public stakedAmount = 0;\n    \n    function stake() external payable {\n        stakedAmount = stakedAmount + msg.value;\n    }\n\n    function returnStake() external {\n        payable(0x48701dF467Ba0efC8D8f34B2686Dc3b0A0b1cab5).transfer(stakedAmount);\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can deploy the contract on Shibuya Testnet using ",(0,a.jsx)(n.a,{href:"https://remix.ethereum.org/",children:"remix"})," or something of your own choice."]}),"\n",(0,a.jsxs)(n.p,{children:["For this demo we had already deployed it here: ",(0,a.jsx)(n.code,{children:"0xCC497f137C3A5036C043EBd62c36F1b8C8A636C0"})]}),"\n",(0,a.jsx)(n.h3,{id:"step-4-building-the-front-end",children:"Step 4: Building the front end"}),"\n",(0,a.jsx)(n.p,{children:"We will have a simple front end with some buttons to interact with the blockchain. Although Banana SDK provides you with a smart contract wallet you don't need worry about its deployment. Everything is handled by us in the SDK so you can concentrate on building your dApp."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://hackmd.io/_uploads/ryPnrYEPh.png",alt:""})}),"\n",(0,a.jsxs)(n.p,{children:["For more information about building the frontend please refer to this ",(0,a.jsx)(n.a,{href:"https://banana-wallet-docs.rizelabs.io/integration/sdk-integration-tutorial/banana-less-than-greater-than-shibuya#building-the-frontend",children:"guide"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"step-5-imports",children:"Step 5: Imports"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'import "./App.css";\nimport { Banana, Chains } from \'@rize-labs/banana-wallet-sdk\';\nimport { useEffect, useState } from "react";\nimport { ethers } from "ethers";\nimport { SampleAbi } from "./SampleAbi";\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Download app.css and SampleAbi.js from here ",(0,a.jsx)(n.a,{href:"https://github.com/Banana-Wallet/banana-tutorial/blob/feat/chaido-tutorial/src/App.css",children:"App.css"})," and ",(0,a.jsx)(n.a,{href:"https://github.com/Banana-Wallet/banana-tutorial/blob/feat/chaido-tutorial/src/SampleAbi.js",children:"SampleAbi.js"})]}),"\n",(0,a.jsx)(n.p,{children:"Initializing some states for demo"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'const [walletAddress, setWalletAddress] = useState("");\nconst [bananaSdkInstance, setBananSdkInstance] = useState(null);\nconst [isLoading, setIsLoading] = useState(false);\nconst [walletInstance, setWalletInstance] = useState(null);\nconst [output, setOutput] = useState("Welcome to Banana Demo");\nconst SampleContractAddress =   "0xCB8a3Ca479aa171aE895A5D2215A9115D261A566";\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-6-initializing-banana-sdk-instance-and-creating-methods",children:"Step 6: Initializing Banana SDK instance and creating methods"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"// calling it in useEffect\n\nuseEffect(() => {\n    getBananaInstance();\n}, []);\n\n  const getBananaInstance = () => {\n    const bananaInstance = new Banana(Chains.shibuyaTestnet);\n    setBananSdkInstance(bananaInstance);\n  };\n"})}),"\n",(0,a.jsx)(n.p,{children:"For simplicity in this example we are creating an SDK instance for Shibuya testnet."}),"\n",(0,a.jsx)(n.p,{children:"Creating Wallet"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'const createWallet = async () => {\n    // starts loading\n    setIsLoading(true);\n    \n    // creating wallet\n    const wallet = await bananaSdkInstance.createWallet();\n    setWalletInstance(wallet);\n    \n    // getting address for wallet created\n    const address = await wallet.getAddress();\n    setWalletAddress(address);\n    setOutput("Wallet Address: " + address);\n    setIsLoading(false);\n };\n \n'})}),"\n",(0,a.jsxs)(n.p,{children:["Developers need to call the ",(0,a.jsx)(n.code,{children:"createWallet"})," method which will inherently ask the user for a wallet name. Once username is provided, the wallet is initialized for the user, and the method returns an instance of the wallet."]}),"\n",(0,a.jsx)(n.p,{children:"Connecting wallet"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'const connectWallet = async () => {\n    \n    // checking does wallet name is cached in cookie \n    const walletName = bananaSdkInstance.getWalletName();\n    \n    // if cached we will use it \n    if (walletName) {\n      setIsLoading(true);\n\n     // connect wallet with cached wallet name\n      const wallet = await bananaSdkInstance.connectWallet(walletName);\n      setWalletInstance(wallet);\n\n      // extracting wallet address for display purpose\n      const address = await wallet.getAddress();\n      setWalletAddress(address);\n      setOutput("Wallet Address: " + address);\n      setIsLoading(false);\n    } else {\n      setIsLoading(false);\n      alert("You don\'t have wallet created!");\n    }\n  };\n  \n'})}),"\n",(0,a.jsxs)(n.p,{children:["When the user wallet is created the wallet's public data is cached in the user's cookie. Once the ",(0,a.jsx)(n.code,{children:"getWalletName"})," function fetches ",(0,a.jsx)(n.code,{children:"walletName"})," from the cookie, we pass ",(0,a.jsx)(n.code,{children:"walletName"})," into ",(0,a.jsx)(n.code,{children:"connectWallet"})," which  initializes and configures some wallet parameters internally, and returns a wallet instance."]}),"\n",(0,a.jsx)(n.p,{children:"Get ChainId"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"  const getChainId = async () => {\n    setIsLoading(true);\n    const signer = walletInstance.getSigner();\n    const chainid = await signer.getChainId();\n    setOutput(JSON.stringify(chainid));\n    setIsLoading(false);\n  };\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Getting ",(0,a.jsx)(n.code,{children:"chainId"})," is pretty straight forward. Developers should extract the ",(0,a.jsx)(n.em,{children:"signer"})," from the wallet and use ",(0,a.jsx)(n.code,{children:"getChainId"})," to obtain the ",(0,a.jsx)(n.code,{children:"chainId"})," of the current network."]}),"\n",(0,a.jsx)(n.p,{children:"Get Network"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"  const getNetwork = async () => {\n    setIsLoading(true);\n    const provider = walletInstance.getProvider();\n    const network = await provider.getNetwork();\n    setOutput(JSON.stringify(network));\n    setIsLoading(false);\n  };\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Extracting the network is as easy as it looks. Developers should extract the ",(0,a.jsx)(n.em,{children:"provider"})," from the wallet and use the ",(0,a.jsx)(n.code,{children:"getNetwork"})," method to obtain the chain info."]}),"\n",(0,a.jsx)(n.p,{children:"Make transaction"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'   const makeTransaction = async () => {\n    setIsLoading(true);\n    \n    // getting signer\n    const signer = walletInstance.getSigner();\n    const amount = "0.00001";\n    const tx = {\n      gasLimit: "0x55555",\n      to: SampleContractAddress,\n      value: ethers.utils.parseEther(amount),\n      data: new ethers.utils.Interface(SampleAbi).encodeFunctionData(\n        "stake",\n        []\n      ),\n    };\n\n    try {\n      // sending txn object via signer\n      const txn = signer.sendTransaction(tx);\n      setOutput(JSON.stringify(txn));\n    } catch (err) {\n      console.log(err);\n    }\n    setIsLoading(false);\n  };\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To initiate a transaction you will create a transaction object. Extract ",(0,a.jsx)(n.em,{children:"signer"})," from the wallet instance and initiate a transaction by passing the ",(0,a.jsx)(n.em,{children:"transaction object"})," to the ",(0,a.jsx)(n.em,{children:"send transaction"})," method.\nPS: Make sure your wallet is funded before you initiate transactions."]}),"\n",(0,a.jsx)(n.p,{children:"Signing message"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'  const signMessage = async () => {\n    setIsLoading(true);\n    const sampleMsg = "Hello World";\n    const signer = walletInstance.getSigner();\n    const signMessageResponse = await signer.signBananaMessage(sampleMsg);\n    setOutput(JSON.stringify(signMessageResponse));\n    setIsLoading(false);\n  };\n'})}),"\n",(0,a.jsx)(n.p,{children:'Signing a message is as simple as it looks. Pass a message that needs to be signed, and the method will return an object { messageSigned: "", signature: "" }'}),"\n",(0,a.jsx)(n.p,{children:"messageSigned: message that was signed."}),"\n",(0,a.jsx)(n.p,{children:"signature: signature for the signed message."}),"\n",(0,a.jsx)(n.h3,{id:"step-7-building-the-frontend",children:"Step 7: Building the frontend"}),"\n",(0,a.jsx)(n.p,{children:"JSX code for frontend"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'<div className="App">\n  <h1>Banana SDK Demo</h1>\n  {walletAddress && <p> Wallet Address: {walletAddress}</p>}\n  <button className="btn" onClick={() => createWallet()}>\n    Create Wallet\n  </button>\n  <button className="btn" onClick={() => connectWallet()}>\n    Connect Wallet\n  </button>\n  <button className="btn" onClick={() => getChainId()}>\n    ChainId\n  </button>\n  <button className="btn" onClick={() => getNetwork()}>\n    Network\n  </button>\n  <button className="btn" onClick={() => makeTransaction()}>\n    Make transaction\n  </button>\n  <button className="btn" onClick={() => signMessage()}>\n    Sign message\n  </button>\n  <h1> Output Panel</h1>\n  <div className="output-div">\n    <p>{isLoading ? "Loading.." : output}</p>\n  </div>\n</div>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsxs)(n.p,{children:["If you are facing a webpack 5 polyfill issue please try using ",(0,a.jsx)(n.code,{children:"react-app-rewired"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install react-app-rewired \n\nnpm install stream-browserify constants-browserify crypto-browserify os-browserify path-browserify process stream-browserify buffer ethers@^5.7.2\n"})}),"\n",(0,a.jsxs)(n.p,{children:["create a file name ",(0,a.jsx)(n.code,{children:"config-overrides.js"})," using the content below."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'const { ProvidePlugin }= require("webpack")\n\nmodule.exports = {\n  webpack: function (config, env) {\n    config.module.rules = config.module.rules.map(rule => {\n      if (rule.oneOf instanceof Array) {\n        rule.oneOf[rule.oneOf.length - 1].exclude = [/\\.(js|mjs|jsx|cjs|ts|tsx)$/, /\\.html$/, /\\.json$/];\n      }\n      return rule;\n    });\n    config.resolve.fallback = {\n      ...config.resolve.fallback,\n      stream: require.resolve("stream-browserify"),\n      buffer: require.resolve("buffer"),\n      crypto: require.resolve("crypto-browserify"),\n      process: require.resolve("process"),\n      os: require.resolve("os-browserify"),\n      path: require.resolve("path-browserify"),\n      constants: require.resolve("constants-browserify"), \n      fs: false\n    }\n    config.resolve.extensions = [...config.resolve.extensions, ".ts", ".js"]\n    config.ignoreWarnings = [/Failed to parse source map/];\n    config.plugins = [\n      ...config.plugins,\n      new ProvidePlugin({\n        Buffer: ["buffer", "Buffer"],\n      }),\n      new ProvidePlugin({\n          process: ["process"]\n      }),\n    ]\n    return config;\n  },\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Change package.json to start using ",(0,a.jsx)(n.code,{children:"react-app-rewired"})," instead of ",(0,a.jsx)(n.code,{children:"react-scripts"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"react-scripts start -> react-app-rewired start\nreact-scripts build -> react-app-rewired build\nreact-scripts test -> react-app-rewired test\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you are still unable to resolve the issue please post your query to Banana Discord ",(0,a.jsx)(n.a,{href:"https://discord.gg/3fJajWBT3N",children:"here"})]}),"\n",(0,a.jsx)(n.h2,{id:"learn-more",children:"Learn more"}),"\n",(0,a.jsxs)(n.p,{children:["To learn more about Banana Wallet head over to ",(0,a.jsx)(n.a,{href:"https://banana-wallet-docs.rizelabs.io/",children:"banana docs"})]}),"\n",(0,a.jsxs)(n.p,{children:["Full tutorial code is available ",(0,a.jsx)(n.a,{href:"https://github.com/Banana-Wallet/banana-tutorial/tree/feat/shibuya-tutorial",children:"here"})]}),"\n",(0,a.jsxs)(n.p,{children:["If your dApp already uses Rainbowkit then you can use Banana Wallet directly on Shibuya testnet. Please refer ",(0,a.jsx)(n.a,{href:"https://docs.bananahq.io/integration/wallet-connectors/using-rainbowkit",children:"here"})," for more information."]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var a=t(67294);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);